/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xml_descendente = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,17],$V3=[1,15],$V4=[1,26],$V5=[1,28],$V6=[1,27],$V7=[4,5,22,24],$V8=[5,6];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"INI":4,"ID":5,"FIN":6,"lista_nodos":7,"CIERRE":8,"EOF":9,"error_sintactio":10,"tipo_error_sinc":11,"nodo":12,"opcion_nodo":13,"cierre_nodo":14,"lista_atributos":15,"cuerpo_nodo":16,"lista_valor":17,"atributos":18,"IGUAL":19,"valor":20,"CADENA":21,"NUM":22,"tipo_valor":23,"ID2":24,"$accept":0,"$end":1},
terminals_: {2:"error",4:"INI",5:"ID",6:"FIN",8:"CIERRE",9:"EOF",19:"IGUAL",21:"CADENA",22:"NUM",24:"ID2"},
productions_: [0,[3,9],[10,2],[11,1],[11,3],[11,1],[7,2],[7,1],[12,3],[13,1],[13,2],[14,2],[16,5],[16,5],[16,1],[15,2],[15,1],[18,3],[20,1],[20,1],[17,2],[17,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new nodo_xml.default($$[$0-7],[],"",$$[$0-5]);
                    var inicio_ = new ast_nodo.default("inicio","");
                    inicio_.InsertarUnNodo("INI", $$[$0-8]);
                    inicio_.InsertarUnNodo("ID", $$[$0-7]);
                    inicio_.InsertarUnNodo("FIN", $$[$0-6]);
                    inicio_.InsertarHijo(lista_nodos_);
                    inicio_.InsertarUnNodo("INI", $$[$0-4]);
                    inicio_.InsertarUnNodo("CIERRE", $$[$0-3]);
                    inicio_.InsertarUnNodo("ID", $$[$0-2]);
                    return this.$;
                    
break;
case 3: case 4: case 5:
 rep_error.InsertarError("Sintactico", "Se encontro un error cerca de token: " + yytext, "xml", this._$.first_line, this._$.first_column) 
break;
case 6:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
                          let tempA = new ast_nodo.default("lista_nodosA","");
                          tempA.InsertarHijo(nodo_);
                          lista_nodos_.InsertarHijo(tempA);
                          
break;
case 7:
 this.$ = new Array(); this.$.push($$[$0]);
                          lista_nodos_.InsertarHijo(nodo_)
                          let tempB = new ast_nodo.default("lista_nodosA","");
                          tempB.InsertarHijo(lista_nodos_);
                          lista_nodos_ = tempB;
                
break;
case 8:
 $$[$0].id = $$[$0-1];this.$ = $$[$0];
                                        nodo_ = new ast_nodo.default("nodo","");
                                        nodo_.InsertarUnNodo("INI", $$[$0-2]);
                                        nodo_.InsertarUnNodo("ID", $$[$0-1]);
                                        nodo_.InsertarHijo(opcion_nodo_);
                                        
break;
case 9:
 this.$ = $$[$0];
                    opcion_nodo_ = new ast_nodo.default("opcion_nodo","");
                    opcion_nodo_.InsertarHijo(cierre_nodo_);
                     
break;
case 10:
 $$[$0].atributos = $$[$0-1];this.$ = $$[$0];
                     cierre_nodo_.InsertarHijo(lista_atributos_);
                     opcion_nodo_.InsertarHijo(cierre_nodo_);
                     
break;
case 11:
 this.$ = $$[$0];
                  cierre_nodo_ = new ast_nodo.default("cierre_nodo","");
                  cierre_nodo_.InsertarHijo(cuerpo_nodo_);
                  ;
                  
break;
case 12:
 this.$ = new nodo_xml.default("",[],$$[$0-4],[],_$[$0-4].first_line,_$[$0-4].first_column)
                    cuerpo_nodo_ = new ast_nodo.default("cuerpo_nodo","");
                    cuerpo_nodo_.InsertarUnNodo("Valor", $$[$0-4]); alert($$[$0-4]);
                    cuerpo_nodo_.InsertarUnNodo("INI", $$[$0-3]);
                    cuerpo_nodo_.InsertarUnNodo("CIERRE", $$[$0-2]);
                    cuerpo_nodo_.InsertarUnNodo("ID", $$[$0-1]);
                    cuerpo_nodo_.InsertarUnNodo("FIN", $$[$0]);
                    
break;
case 13:
 this.$ = new nodo_xml.default("",[],"",$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column)
                    cuerpo_nodo_ = new ast_nodo.default("cuerpo_nodo","");
                    cuerpo_nodo_.InsertarHijo(lista_nodos_);
                    cuerpo_nodo_.InsertarUnNodo("INI", $$[$0-3]);
                    cuerpo_nodo_.InsertarUnNodo("CIERRE", $$[$0-2]);
                    cuerpo_nodo_.InsertarUnNodo("ID", $$[$0-1]);
                    cuerpo_nodo_.InsertarUnNodo("FIN", $$[$0]);
                  
break;
case 14:
 this.$ = new nodo_xml.default("recuparado",[],"",[])  
break;
case 15:
 this.$ = $$[$0]; this.$.push($$[$0-1])
                      lista_atributos_.InsertarHijo(atributos_);
                      
break;
case 16:
 this.$ = new Array(); this.$.push($$[$0]);
                      lista_atributos_ = new ast_nodo.default("lista_atributos","");
                
break;
case 17:
 this.$ = new atr_xml.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
                      atributos_ = new ast_nodo.default("atributos","");
                      atributos_.InsertarUnNodo("ID", $$[$0-2]);
                      atributos_.InsertarUnNodo("IGUAL", $$[$0-1]);
                      atributos_.InsertarUnNodo("VALOR", $$[$0]);
                      
break;
case 18:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = $$[$0] 
break;
case 19: case 21: case 22: case 23: case 24:
 this.$ = $$[$0] 
break;
case 20:
 this.$ = $$[$0-1] + " " + $$[$0] 
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{4:$V0,7:5,12:6},{4:[1,8],12:9},{4:[2,7]},{5:$V1},{5:$V1,8:[1,11]},{4:[2,6]},{5:$V2,6:$V3,13:12,14:13,15:14,18:16},{5:[1,18]},{4:[2,8]},{4:[2,9]},{6:$V3,14:19},{2:[1,25],4:$V0,5:$V4,7:22,10:23,12:6,16:20,17:21,22:$V5,23:24,24:$V6},{5:$V2,6:[2,16],15:29,18:16},{19:[1,30]},{6:[1,31]},{4:[2,10]},{4:[2,11]},{4:[1,32]},{4:[1,33],12:9},{4:[2,14]},{4:[2,21],5:$V4,17:34,22:$V5,23:24,24:$V6},{4:[1,38],6:[1,36],8:[1,37],11:35},o($V7,[2,22]),o($V7,[2,23]),o($V7,[2,24]),{6:[2,15]},{20:39,21:[1,40],22:[1,41]},{9:[1,42]},{8:[1,43]},{5:$V1,8:[1,44]},{4:[2,20]},{4:[2,2]},{4:[2,3]},{5:[1,45]},{4:[2,5]},o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),{1:[2,1]},{5:[1,46]},{5:[1,47]},{6:[1,48]},{6:[1,49]},{6:[1,50]},{4:[2,4]},{4:[2,12]},{4:[2,13]}],
defaultActions: {6:[2,7],9:[2,6],12:[2,8],13:[2,9],19:[2,10],20:[2,11],23:[2,14],29:[2,15],34:[2,20],35:[2,2],36:[2,3],38:[2,5],42:[2,1],48:[2,4],49:[2,12],50:[2,13]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const nodo_xml = require('../clases/xml/nodo_xml');
    const atr_xml = require('../clases/xml/atr_xml');
    const rep_error = require('../reports/ReportController')
    const ast_nodo = require('../reports/ASTNodo')

    let lista_nodos_ = new ast_nodo.default("lista_nodos0","");
    let nodo_ = new ast_nodo.default("nodo","");
    let opcion_nodo_ = new ast_nodo.default("opcion_nodo","");
    let ciere_nodo_ = new ast_nodo.default("cierre_nodo","");
    let lista_atributos_ = new ast_nodo.default("lista_atributos","");
    let cuerpo_nodo_ = new ast_nodo.default("cuerpo_nodo","");
    let lista_valor_ = new ast_nodo.default("lista_valor","");
    let atributos_ = new ast_nodo.default("atributos","");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* */
break;
case 1:/* */
break;
case 2:/* skip whitespace */
break;
case 3:/* */
break;
case 4: return 4
break;
case 5: return 8
break;
case 6: return 6
break;
case 7: return 19
break;
case 8: return 22
break;
case 9: return 5
break;
case 10:console.log("SI ENTRE2"); return 24
break;
case 11:console.log("SI ENTRE2"); return 24
break;
case 12:console.log("SI ENTRE2"); return 24
break;
case 13: return 21
break;
case 14:/* skip whitespace */
break;
case 15:return 9
break;
case 16: rep_error.InsertarError("lexico", yy_.yytext, "xml", yy_.yylloc.first_line, yy_.yylloc.first_column); console.log(`Error lexico ${yy_.yytext}`) 
break;
}
},
rules: [/^(?:((\/\*)[^\*\/]*(\*\/)))/i,/^(?:[ \\\t\r\n\f])/i,/^(?:\s+)/i,/^(?:(\/\/[^\n]*))/i,/^(?:<)/i,/^(?:\/)/i,/^(?:>)/i,/^(?:=)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*)|((!|¡|\)|\(|\[|\]|%|\?|¿|\$|#|,|-|\.|;| |[\s\r\n\t]))|((\n\s*))|([0-9]+(\.[0-9]+)?))*([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*)|((!|¡|\)|\(|\[|\]|%|\?|¿|\$|#|,|-|\.|;| |[\s\r\n\t]))|((\n\s*))|([0-9]+(\.[0-9]+)?))*([0-9]+(\.[0-9]+)?))/i,/^(?:(([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*)|((!|¡|\)|\(|\[|\]|%|\?|¿|\$|#|,|-|\.|;| |[\s\r\n\t]))|((\n\s*))|([0-9]+(\.[0-9]+)?))*((!|¡|\)|\(|\[|\]|%|\?|¿|\$|#|,|-|\.|;| |[\s\r\n\t])))/i,/^(?:(("([^\"\\])*")))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xml_descendente;
exports.Parser = xml_descendente.Parser;
exports.parse = function () { return xml_descendente.parse.apply(xml_descendente, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}