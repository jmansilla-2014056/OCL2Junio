/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var optimizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,18],$V1=[6,8,18],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,28],$V7=[1,32],$V8=[1,31],$V9=[1,51],$Va=[1,54],$Vb=[2,52],$Vc=[13,16,34],$Vd=[1,68],$Ve=[1,67],$Vf=[1,65],$Vg=[1,70],$Vh=[1,71],$Vi=[1,72],$Vj=[9,13,25,31,36,38,39],$Vk=[1,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"declaraciones":4,"metodos":5,"EOF":6,"declaracion":7,"TIPO":8,"ID":9,"COR_ABRE":10,"NUM":11,"COR_CIERRA":12,"PUNTOCOMA":13,"COMA":14,"lista_comas":15,"IGUAL":16,"CADENA":17,"VOID":18,"PAR_ABRE":19,"PAR_CIERRA":20,"stack":21,"metodo":22,"LLAVE_ABRE":23,"lista_intrucciones":24,"LLAVE_CIERRA":25,"instruccion":26,"asignacion":27,"llamada_funcion":28,"if_estado":29,"salto_etiqueta":30,"declaracion_etiquita":31,"retorno":32,"DOS_PUNTOS":33,"OPERACION":34,"stck":35,"IF":36,"LOGICA":37,"GOTO":38,"RETURN":39,"PUNTCOMA":40,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"TIPO",9:"ID",10:"COR_ABRE",11:"NUM",12:"COR_CIERRA",13:"PUNTOCOMA",14:"COMA",16:"IGUAL",17:"CADENA",18:"VOID",19:"PAR_ABRE",20:"PAR_CIERRA",23:"LLAVE_ABRE",25:"LLAVE_CIERRA",31:"declaracion_etiquita",33:"DOS_PUNTOS",34:"OPERACION",35:"stck",36:"IF",37:"LOGICA",38:"GOTO",39:"RETURN",40:"PUNTCOMA"},
productions_: [0,[3,3],[4,2],[4,1],[7,6],[7,3],[7,6],[7,5],[7,5],[7,5],[7,5],[7,5],[15,3],[15,2],[5,2],[5,1],[22,7],[22,7],[24,2],[24,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,2],[27,4],[27,5],[27,5],[27,6],[27,6],[27,6],[27,6],[27,4],[27,4],[27,4],[27,6],[27,6],[27,6],[27,6],[27,6],[27,6],[27,6],[27,6],[27,6],[27,4],[27,4],[21,7],[21,7],[21,4],[21,4],[28,4],[28,10],[28,10],[28,11],[28,5],[28,7],[29,9],[29,9],[29,9],[29,9],[29,8],[29,8],[29,7],[29,7],[30,3],[32,3],[32,3],[32,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 let X = new clase_declaraciones.default($$[$0-2]);
                      let Y = $$[$0-1];
                      return [X, Y];
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 15: case 19:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4:
 this.$ = new clase_declaracion.default($$[$0-5], $$[$0-4] + "[" + $$[$0-2] + "]"); 
break;
case 5:
 this.$ = new clase_declaracion.default($$[$0-2], $$[$0-1]); 
break;
case 6:
 this.$ = new clase_declaracion.default($$[$0-5], $$[$0-4] + " ," + $$[$0-2] + $$[$0-1]);  
break;
case 7: case 8: case 9: case 10: case 11:
 this.$ = new clase_declaracion.default($$[$0-4], $$[$0-3]+$$[$0-2]+$$[$0-1]);
break;
case 12:
 this.$ = $$[$0-2]; this.$+= $$[$0-1]+' '+$$[$0] 
break;
case 13:
 this.$=''; this.$ += $$[$0-1]+' '+$$[$0] 
break;
case 14: case 18:
 this.$ = $$[$0-1] ; this.$.push($$[$0]); 
break;
case 16: case 17:
 this.$ = new clase_metodo.default($$[$0-6], $$[$0-5]); this.$.insertar_lista($$[$0-1]); 
break;
case 20: case 21: case 22: case 23: case 24: case 25:
 this.$ = $$[$0]; 
break;
case 26:
 
break;
case 27:
 this.$ = new clase_etiqueta.default($$[$0-1]); 
break;
case 28: case 47: case 48:
 this.$ = new clase_asignacion.default( $$[$0-3], $$[$0-1], "","" ); 
break;
case 29: case 30:
 this.$ = new clase_asignacion.default( $$[$0-4], $$[$0-2], "-", $$[$0-1].replace("-",""));
break;
case 31: case 32: case 33: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46:
 this.$ = new clase_asignacion.default( $$[$0-5], $$[$0-3], $$[$0-2], $$[$0-1]); 
break;
case 34:
 this.$ = new clase_asignacion.default( $$[$0-5], $$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 35: case 36: case 37:
 this.$ = new clase_asignacion.default( $$[$0-3], $$[$0-1],"","" ); 
break;
case 49: case 50:
 this.$ =  $$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 51: case 52:
  this.$ =  $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 53:
 this.$ = new clase_llamada_funcion.default($$[$0-3]+$$[$0-2]+$$[$0-1]); 
break;
case 54: case 55:
 this.$ = new clase_print.default($$[$0-9]+$$[$0-8]+$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]);  
break;
case 56:
 this.$ = new clase_print.default($$[$0-10]+$$[$0-9]+$$[$0-8]+$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]);
break;
case 57:
 this.$ = new clase_print.default($$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]);
break;
case 58:
 this.$ = new clase_print.default($$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]);
break;
case 59: case 60: case 61: case 62:
 this.$ = new clase_if.default($$[$0-6], $$[$0-5], $$[$0-4], $$[$0-1]); 
break;
case 63: case 64:
 this.$ = new clase_if.default("", $$[$0-5], $$[$0-4], $$[$0-1]); 
break;
case 65: case 66:
 this.$ = new clase_if.default("", "", $$[$0-4], $$[$0-1]); 
break;
case 67:
 this.$ = new clase_goto.default($$[$0-1]); 
break;
case 68: case 69:
 this.$ = new clase_return.default($$[$0-1]); 
break;
case 70:
 this.$ = new clase_return.default(""); 
break;
}
},
table: [{3:1,4:2,7:3,8:[1,4],18:[1,5]},{1:[3]},{5:6,7:7,8:[1,9],18:[1,10],22:8},o($V0,[2,3]),{9:[1,11],21:12},{9:[1,13]},{6:[1,14],8:[1,17],18:[1,16],22:15},o($V0,[2,2]),o($V1,[2,15]),{9:[1,18],21:12},{9:[1,19]},{10:$V2,13:$V3,14:$V4,16:$V5},{16:[1,24]},{19:[1,25]},{1:[2,1]},o($V1,[2,14]),{9:[1,26]},{9:[1,27]},{10:$V2,13:$V3,14:$V4,16:$V5,19:$V6},{19:[1,29]},{9:$V7,11:[1,30],19:$V8},o($V0,[2,5]),{9:[1,34],15:33},{11:[1,35],17:[1,36]},{17:[1,37]},{20:[1,38]},{19:[1,39]},{19:$V6},{20:[1,40]},{20:[1,41]},{12:[1,42]},{8:[1,43]},{12:[1,44]},{9:[1,45]},{13:[1,46],14:[1,47]},{13:[1,48]},{13:[1,49]},{13:[1,50]},{13:$V9},{20:[1,52]},{23:[1,53]},{13:$V9,23:$Va},{13:[1,55],16:$Vb},{20:[1,56]},o($Vc,[2,51]),{13:[1,57],14:[1,58]},o($V0,[2,7]),{9:[2,13]},o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,11]),o($V0,[2,10]),{23:$Va},{9:$Vd,13:$Ve,21:69,24:59,26:60,27:61,28:62,29:63,30:64,31:$Vf,32:66,36:$Vg,38:$Vh,39:$Vi},{9:$Vd,13:$Ve,21:69,24:73,26:60,27:61,28:62,29:63,30:64,31:$Vf,32:66,36:$Vg,38:$Vh,39:$Vi},o($V0,[2,4]),{9:[1,74],11:[1,75]},o($V0,[2,6]),{9:[2,12]},{9:$Vd,13:$Ve,21:69,25:[1,76],26:77,27:61,28:62,29:63,30:64,31:$Vf,32:66,36:$Vg,38:$Vh,39:$Vi},o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),{10:$Vk,16:[1,79],19:[1,80],33:[1,78]},{16:[1,82]},{19:[1,83]},{9:[1,84]},{9:[1,85],11:[1,86],13:[1,87]},{9:$Vd,13:$Ve,21:69,25:[1,88],26:77,27:61,28:62,29:63,30:64,31:$Vf,32:66,36:$Vg,38:$Vh,39:$Vi},{12:[1,89]},{12:[1,90]},o($V1,[2,17]),o($Vj,[2,18]),o($Vj,[2,27]),{9:[1,92],11:[1,93],21:91},{9:[1,96],17:[1,95],20:[1,94]},{9:$V7,11:[1,97],19:$V8},{9:[1,99],11:[1,98],21:100},{9:[1,101],11:[1,102],37:[1,103]},{13:[1,104]},{40:[1,105]},{13:[1,106]},o($Vj,[2,70]),o($V1,[2,16]),o($Vc,[2,49]),o($Vc,[2,50]),{13:[1,107]},{10:$Vk,11:[1,108],13:[1,110],34:[1,109]},{11:[1,111],13:[1,113],34:[1,112]},{13:[1,114]},{14:[1,115],20:[1,116]},{14:[1,117]},{12:[1,118]},{13:[1,119],34:[1,120]},{10:$Vk,13:[1,121],34:[1,122]},{13:[1,123],34:[1,124]},{20:[1,126],37:[1,125]},{20:[1,128],37:[1,127]},{9:[1,130],11:[1,129]},o($Vj,[2,67]),o($Vj,[2,68]),o($Vj,[2,69]),o($Vj,[2,28]),{13:[1,131]},{9:[1,132],11:[1,133]},o($Vj,[2,48]),{13:[1,134]},{9:[1,135],11:[1,136]},o($Vj,[2,47]),o($Vj,[2,53]),{9:[1,138],19:[1,137]},{13:[1,139]},{11:[1,140]},o($Vc,$Vb),o($Vj,[2,35]),{9:[1,142],11:[1,141],21:143},o($Vj,[2,36]),{9:[1,145],11:[1,144],35:[1,146]},o($Vj,[2,37]),{9:[1,148],11:[1,147],21:149},{9:[1,150],11:[1,151]},{38:[1,152]},{9:[1,153],11:[1,154]},{38:[1,155]},{20:[1,156]},{20:[1,157]},o($Vj,[2,29]),{13:[1,158]},{13:[1,159]},o($Vj,[2,30]),{13:[1,160]},{13:[1,161]},{8:[1,162]},{20:[1,163]},o($Vj,[2,57]),{14:[1,164]},{13:[1,165]},{10:$Vk,13:[1,166]},{13:[1,167]},{13:[1,168]},{13:[1,169]},{13:[1,170]},{13:[1,171]},{10:$Vk,13:[1,172]},{13:[1,173]},{20:[1,174]},{20:[1,175]},{9:[1,176]},{20:[1,177]},{20:[1,178]},{9:[1,179]},{38:[1,180]},{38:[1,181]},o($Vj,[2,31]),o($Vj,[2,32]),o($Vj,[2,33]),o($Vj,[2,34]),{20:[1,182]},{13:[1,183]},{17:[1,184]},o($Vj,[2,38]),o($Vj,[2,39]),o($Vj,[2,45]),o($Vj,[2,40]),o($Vj,[2,41]),o($Vj,[2,46]),o($Vj,[2,42]),o($Vj,[2,43]),o($Vj,[2,44]),{38:[1,185]},{38:[1,186]},{13:[1,187]},{38:[1,188]},{38:[1,189]},{13:[1,190]},{9:[1,191]},{9:[1,192]},{9:[1,194],11:[1,193]},o($Vj,[2,58]),{14:[1,195]},{9:[1,196]},{9:[1,197]},o($Vj,[2,65]),{9:[1,198]},{9:[1,199]},o($Vj,[2,66]),{13:[1,200]},{13:[1,201]},{20:[1,202]},{20:[1,203]},{9:[1,204]},{13:[1,205]},{13:[1,206]},{13:[1,207]},{13:[1,208]},o($Vj,[2,63]),o($Vj,[2,64]),{13:[1,209]},{13:[1,210]},{20:[1,211]},o($Vj,[2,59]),o($Vj,[2,60]),o($Vj,[2,61]),o($Vj,[2,62]),o($Vj,[2,54]),o($Vj,[2,55]),{13:[1,212]},o($Vj,[2,56])],
defaultActions: {14:[2,1],47:[2,13],58:[2,12]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

      const clase_declaraciones = require('../clases/optimizador/declaraciones');
      const clase_declaracion = require('../clases/optimizador/declaracion');
      const clase_metodo = require('../clases/optimizador/metodo');
      const clase_asignacion = require('../clases/optimizador/asignacion');
      const clase_llamada_funcion = require('../clases/optimizador/call_funcion');
      const clase_if = require('../clases/optimizador/if_expresion');
      const clase_goto = require('../clases/optimizador/goto_expresion');
      const clase_etiqueta = require('../clases/optimizador/etiqueta');
      const clase_return = require('../clases/optimizador/return_expresion');
      const clase_print = require('../clases/optimizador/print_expresion');
      const rep_error = require('../reports/ReportController');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:/* skip */
break;
case 2:/*skip comments*/
break;
case 3:/* */
break;
case 4:/* */
break;
case 5:/* skip whitespace */
break;
case 6:/* */
break;
case 7:/* IGNORE */
break;
case 8:/* IGNORE */
break;
case 9:return 11;
break;
case 10:return 13
break;
case 11:return 33
break;
case 12:return 23;
break;
case 13:return 25;
break;
case 14:return 19;
break;
case 15:return 20;
break;
case 16:return 10;
break;
case 17:return 12;
break;
case 18:return 14;
break;
case 19:return 37;
break;
case 20:return 37;
break;
case 21:return 37;
break;
case 22:return 37;
break;
case 23:return 37;
break;
case 24:return 37;
break;
case 25:return 37;
break;
case 26:return 37;
break;
case 27:return 16;
break;
case 28:return 34;
break;
case 29:return 34;
break;
case 30:return 34;
break;
case 31:return 34;
break;
case 32:return 34;
break;
case 33:return 18;
break;
case 34:return 38;
break;
case 35:return 8;
break;
case 36:return 8;
break;
case 37:return 8;
break;
case 38:return 8;
break;
case 39:return 36;
break;
case 40:return 39
break;
case 41:return 9;
break;
case 42:return 17;
break;
case 43:return 17;
break;
case 44:return 'LD';
break;
case 45:/* skip whitespace */
break;
case 46:return 6
break;
case 47: rep_error.InsertarError("lexico", yy_.yytext, "xml", yy_.yylloc.first_line, yy_.yylloc.first_column); console.log(`Error lexico ${yy_.yytext}`) 
break;
}
},
rules: [/^(?:((\/\*)[^\*\/]*(\*\/)))/i,/^(?:[#][^\n]*)/i,/^(?:[<][!][-][-][^-<]*[-][-][>])/i,/^(?:((\/\*)[^\*\/]*(\*\/)))/i,/^(?:[ \\\t\r\n\f])/i,/^(?:\s+)/i,/^(?:(\/\/[^\n]*))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[/][-][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([-])?[0-9]+(\.[0-9]+)?))/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:void\b)/i,/^(?:goto\b)/i,/^(?:int\b)/i,/^(?:float\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:if\b)/i,/^(?:return\b)/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:("[^"]*"))/i,/^(?:(("([^\"\\])*")))/i,/^(?:{TIPO}({ID}{COMA})+)/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = optimizador;
exports.Parser = optimizador.Parser;
exports.parse = function () { return optimizador.parse.apply(optimizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}