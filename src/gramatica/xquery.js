/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,25],$V2=[1,24],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,35],$V8=[1,27],$V9=[1,18],$Va=[1,22],$Vb=[1,33],$Vc=[1,36],$Vd=[1,19],$Ve=[1,14],$Vf=[1,15],$Vg=[1,16],$Vh=[1,17],$Vi=[1,20],$Vj=[1,21],$Vk=[1,23],$Vl=[5,16,17,21,24,29,30,32,35,36,37,38,40,48,55,57,61,62,67,68,69,70,71,72,90],$Vm=[5,16,17,21,24,29,30,32,35,36,37,38,40,55,57,61,62,67,68,69,70,71,72,90],$Vn=[1,48],$Vo=[1,40],$Vp=[1,41],$Vq=[1,39],$Vr=[1,42],$Vs=[1,43],$Vt=[1,44],$Vu=[1,45],$Vv=[1,46],$Vw=[1,47],$Vx=[1,49],$Vy=[1,50],$Vz=[1,51],$VA=[1,52],$VB=[1,53],$VC=[1,54],$VD=[1,55],$VE=[1,56],$VF=[1,57],$VG=[1,58],$VH=[1,59],$VI=[5,16,17,19,21,24,29,30,32,35,36,37,38,40,48,55,57,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VJ=[5,16,17,19,21,24,29,30,32,35,36,37,38,40,48,55,57,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VK=[2,110],$VL=[5,16,17,19,21,22,23,24,26,29,30,32,35,36,37,38,40,48,55,57,58,61,62,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VM=[2,115],$VN=[1,65],$VO=[1,68],$VP=[5,16,17,21,23,24,26,29,30,32,35,36,37,38,40,48,55,57,58,62,67,68,69,70,71,72,90],$VQ=[1,76],$VR=[1,81],$VS=[1,83],$VT=[1,84],$VU=[1,85],$VV=[5,16,17,21,23,24,26,29,30,32,35,36,37,38,40,48,55,57,58,61,62,67,68,69,70,71,72,90],$VW=[1,118],$VX=[1,121],$VY=[2,116],$VZ=[5,16,17,19,21,22,23,24,26,29,30,32,35,36,37,38,40,48,55,57,58,61,62,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,88,89,90],$V_=[2,142],$V$=[5,16,17,21,22,23,24,26,29,30,32,35,36,37,38,40,55,57,58,61,62,65,67,68,69,70,71,72,88,89,90],$V01=[1,124],$V11=[1,128],$V21=[5,16,17,21,24,29,30,32,35,36,37,38,40,48,55,57,62,67,68,69,70,71,72,90],$V31=[5,16,17,23,24,26,29,30,32,35,36,37,38,40,55,57,58,61,62,67,68,69,70,71,72,90],$V41=[5,16,17,21,23,24,26,29,30,32,35,36,37,38,40,55,57,58,61,62,67,68,69,70,71,72,90],$V51=[5,16,17,19,21,22,23,24,26,29,30,32,35,36,37,38,40,48,55,57,58,61,62,65,67,68,69,70,71,72,73,76,77,78,79,80,81,88,89,90],$V61=[5,16,17,19,21,22,23,24,26,29,30,32,35,36,37,38,40,55,57,58,61,62,65,67,68,69,70,71,72,76,77,78,79,80,81,88,89,90],$V71=[5,16,17,21,22,23,24,26,29,30,32,35,36,37,38,40,55,57,58,61,62,65,67,68,69,70,71,72,90],$V81=[1,156],$V91=[23,26],$Va1=[5,35,36,57],$Vb1=[2,67],$Vc1=[16,17,21,24,26,29,30,32,37,38,40,48,55,61,62,67,68,69,70,71,72,90],$Vd1=[16,17,21,24,26,29,30,32,37,38,40,48,55,62,67,68,69,70,71,72,90],$Ve1=[1,237],$Vf1=[1,251],$Vg1=[1,287],$Vh1=[1,288],$Vi1=[1,289],$Vj1=[1,290],$Vk1=[1,291],$Vl1=[23,26,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_xquery":4,"EOF":5,"opcion_xquery":6,"e":7,"opcion_let":8,"opcion_xpath":9,"opcion_function":10,"opcion_for":11,"opcion_where":12,"opcion_order":13,"opcion_return":14,"opcion_if":15,"VAR":16,"LET":17,"DPTN":18,"IGUAL":19,"range_let":20,"PARA":21,"TO":22,"PARC":23,"FOR":24,"range_for":25,"COMA":26,"IN":27,"AT":28,"WHERE":29,"ORDER":30,"BY":31,"RETURN":32,"sub_return":33,"range_return":34,"LLAVEA":35,"LLAVEC":36,"DATA":37,"DECLARE":38,"FUNCTION":39,"ID":40,"range_function":41,"AS":42,"XS":43,"types":44,"PTCOMA":45,"parametros":46,"function_nativa":47,"MENOS":48,"STRING":49,"QUESTION":50,"INTEGER":51,"DECIMAL":52,"DOUBLE":53,"BOOLEAN":54,"IF":55,"THEN":56,"ELSE":57,"SEVERAL":58,"lista_select":59,"select":60,"DIV":61,"ATR":62,"MULTI":63,"CORA":64,"CORC":65,"PTN":66,"NUM":67,"CADENA":68,"LAST":69,"POSITION":70,"TRUE":71,"FALSE":72,"MAS":73,"DIVS":74,"MODULO":75,"MENORQUE":76,"MAYORQUE":77,"MENORIGUAL":78,"MAYORIGUAL":79,"IGUALIGUAL":80,"DIFERENTE":81,"IGUALU":82,"DIFERENTEU":83,"MENORQUEIU":84,"MENORQUEU":85,"MAYORQUEIU":86,"MAYORQUEU":87,"OR":88,"AND":89,"NOT":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"VAR",17:"LET",18:"DPTN",19:"IGUAL",21:"PARA",22:"TO",23:"PARC",24:"FOR",26:"COMA",27:"IN",28:"AT",29:"WHERE",30:"ORDER",31:"BY",32:"RETURN",35:"LLAVEA",36:"LLAVEC",37:"DATA",38:"DECLARE",39:"FUNCTION",40:"ID",42:"AS",43:"XS",45:"PTCOMA",48:"MENOS",49:"STRING",50:"QUESTION",51:"INTEGER",52:"DECIMAL",53:"DOUBLE",54:"BOOLEAN",55:"IF",56:"THEN",57:"ELSE",58:"SEVERAL",61:"DIV",62:"ATR",63:"MULTI",64:"CORA",65:"CORC",66:"PTN",67:"NUM",68:"CADENA",69:"LAST",70:"POSITION",71:"TRUE",72:"FALSE",73:"MAS",74:"DIVS",75:"MODULO",76:"MENORQUE",77:"MAYORQUE",78:"MENORIGUAL",79:"MAYORIGUAL",80:"IGUALIGUAL",81:"DIFERENTE",82:"IGUALU",83:"DIFERENTEU",84:"MENORQUEIU",85:"MENORQUEU",86:"MAYORQUEIU",87:"MAYORQUEU",88:"OR",89:"AND",90:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[8,5],[8,6],[20,1],[20,5],[20,3],[20,3],[11,3],[25,3],[25,3],[25,3],[25,4],[25,5],[25,5],[25,6],[25,7],[25,7],[25,9],[25,9],[12,3],[12,2],[13,4],[13,3],[14,2],[33,2],[33,1],[34,1],[34,1],[34,2],[34,3],[34,3],[34,3],[34,4],[34,4],[34,4],[34,5],[34,5],[34,6],[34,7],[34,7],[34,8],[10,16],[10,12],[10,15],[10,11],[10,6],[10,1],[41,3],[41,5],[47,4],[47,6],[47,4],[46,3],[46,1],[46,2],[46,1],[44,2],[44,2],[44,2],[44,2],[44,2],[44,1],[44,1],[44,1],[44,1],[44,1],[15,6],[15,8],[15,8],[9,3],[9,1],[59,2],[59,1],[60,2],[60,3],[60,3],[60,4],[60,2],[60,3],[60,3],[60,4],[60,5],[60,6],[60,2],[60,3],[60,5],[60,5],[60,6],[60,6],[60,8],[60,9],[60,2],[60,3],[60,3],[60,4],[60,4],[60,5],[7,1],[7,1],[7,1],[7,3],[7,3],[7,1],[7,2],[7,1],[7,1],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,3],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                    reportG.push(new gramatic.default("inicio : lista_xquery EOF","{ inicio.val = lista_xquery.val; }"));
                    let auxReportG = reportG;
                    reportG = [];
                    this.$ = { "xquery": $$[$0-1], "reportG": auxReportG };
                    return this.$;    
                
break;
case 2:

                    this.$ = $$[$0-1];
                    this.$.push($$[$0]);
                    reportG.push(new gramatic.default("lista_xquery : lista_xquery opcion_xquery","{ lista_xquery.val = lista_xqueryP.val;\n lista_xquery.val.push(opcion_xquery.val); }"));
                
break;
case 3:

                    this.$ = [$$[$0]];
                    reportG.push(new gramatic.default("lista_xquery : opcion_xquery","{ lista_xquery.val = [opcion_xquery.val]; }"));
                
break;
case 4:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : e","{ opcion_xquery.val = e.val; }"));
                
break;
case 5:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_let","{ opcion_xquery.val = opcion_let.val; }"));
                
break;
case 6:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_xpath","{ opcion_xquery.val = opcion_xpath.val; }"));
                
break;
case 7:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_function","{ opcion_xquery.val = opcion_function.val; }"));
                
break;
case 8:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_for","{ opcion_xquery.val = opcion_for.val; }"));
                
break;
case 9:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_where","{ opcion_xquery.val = opcion_where.val; }"));
                
break;
case 10:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_order","{ opcion_xquery.val = opcion_order.val; }"));
                
break;
case 11:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_return","{ opcion_xquery.val = opcion_return.val; }"));
                
break;
case 12:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_xquery : opcion_if","{ opcion_xquery.val = opcion_if.val; }"));
                
break;
case 13:

                    this.$ = new variable_query.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("opcion_xquery : VAR opcion_xpath","{ opcion_xquery.val = new variable_query.default(VAR.valLex,opcion_xpath.val); }"));
                
break;
case 14:

                    $$[$0].identificador.id = $$[$0-3];
                    $$[$0].return = null;
                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_let : LET VAR DPTN IGUAL range_let","{ range_let.val.identificador.id = VAR.valLex;\n opcion_let.val = range_let.val; }"));
                
break;
case 15:

                    $$[$0-1].identificador.id = $$[$0-4];
                    $$[$0-1].return = $$[$0];
                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("opcion_let : LET VAR DPTN IGUAL range_let opcion_return","{ range_let.val.identificador.id = VAR.valLex;\n opcion_let.val = range_let.val; }"));
                
break;
case 16:

                    this.$ = new let_query.default(new variable_query.default('',[],_$[$0].first_line,_$[$0].first_column),$$[$0],_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("range_let : e","{ range_let.val = new let_query.default(new variable_query.default('',[]),e.val); }"));
                
break;
case 17:

                    this.$ = new let_query.default(new variable_query.default('',[],_$[$0-4].first_line,_$[$0-4].first_column),["to",$$[$0-3],$$[$0-1]],_$[$0-4].first_line,_$[$0-4].first_column);
                    reportG.push(new gramatic.default("range_let : PARA e TO e PARC","{ range_let.val = new let_query.default(new variable_query.default('',[]),['to',e.val,e.val]); }"));
                
break;
case 18:

                    this.$ = new let_query.default(new variable_query.default('',$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column),null,_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("range_let : PARA opcion_xpath PARC","{ range_let.val = new let_query.default(new variable_query.default('',opcion_xpath.val),null); }"));
                
break;
case 19:

                    this.$ = new let_query.default(new variable_query.default('',[],_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("range_let : PARA opcion_function PARC","{ range_let.val = new let_query.default(new variable_query.default('',[]),opcion_function.val); }"));
                
break;
case 20:

                    let vari = []; let idat = []; let condi = [];
                    let bolat = []; let linea = 0; let colum = 0;
                    for (let i = 0; i < $$[$0-1].length; i++){
                        vari.push($$[$0-1][i][0]);
                        idat.push($$[$0-1][i][1]);
                        condi.push($$[$0-1][i][2]);
                        bolat.push($$[$0-1][i][3]);
                        linea = $$[$0-1][i][5];
                        colum = $$[$0-1][i][6]
                    }
                    this.$ = new for_query.default(vari,idat,condi,bolat,$$[$0],linea,colum);
                    reportG.push(new gramatic.default("opcion_for : FOR range_for","{ opcion_for.val = range_for.val; }"));
                
break;
case 21:

                    this.$ = $$[$0-2].concat($$[$0]);
                    reportG.push(new gramatic.default("range_for : range_for COMA range_for","{ range_for.val = range_forP.val.concat(range_forP.val); }"));
                
break;
case 22:

                    this.$ = [[new variable_query.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column),'',new variable_query.default('',$$[$0],_$[$0-2].first_line,_$[$0-2].first_column),false,[],_$[$0-2].first_line,_$[$0-2].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column),'',new variable_query.default('',$$[$0],_$[$0-2].first_line,_$[$0-2].first_column),false,[],_$[$0-2].first_line,_$[$0-2].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR IN opcion_xpath","{ range_for.val = new for_query.default(VAR.valLex,'',new variable_query.default('',opcion_xpath.val),false); }")); 
                
break;
case 23:

                    this.$ = [[new variable_query.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column),'',new variable_query.default($$[$0],[],_$[$0-2].first_line,_$[$0-2].first_column),false,[],_$[$0-2].first_line,_$[$0-2].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column),'',new variable_query.default($$[$0],[],_$[$0-2].first_line,_$[$0-2].first_column),false,[],_$[$0-2].first_line,_$[$0-2].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR IN VAR","{ range_for.val = new for_query.default(VAR.valLex,'',new variable_query.default(VAR.valLex,[]),false); }")); 
                
break;
case 24:

                    this.$ = [[new variable_query.default($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column),'',new variable_query.default($$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column),false,[],_$[$0-3].first_line,_$[$0-3].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column),'',new variable_query.default($$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column),false,[],_$[$0-3].first_line,_$[$0-3].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR IN VAR opcion_xpath","{ range_for.val = new for_query.default(VAR.valLex,'',new variable_query.default(VAR.valLex,opcion_xpath.val),false); }")); 
                
break;
case 25:

                    this.$ = [[new variable_query.default($$[$0-4],[],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-2],new variable_query.default('',$$[$0],_$[$0-4].first_line,_$[$0-4].first_column),true,[],_$[$0-4].first_line,_$[$0-4].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-4],[],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-2],new variable_query.default('',$$[$0],_$[$0-4].first_line,_$[$0-4].first_column),true,[],_$[$0-4].first_line,_$[$0-4].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR AT VAR IN opcion_xpath","{ range_for.val = new for_query.default(VAR.valLex,VAR.valLex,new variable_query.default('',opcion_xpath.val),true); }"));
                
break;
case 26:

                    this.$ = [[new variable_query.default($$[$0-4],[],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-2],new variable_query.default($$[$0],[],_$[$0-4].first_line,_$[$0-4].first_column),true,[],_$[$0-4].first_line,_$[$0-4].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-4],[],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-2],new variable_query.default($$[$0],[],_$[$0-4].first_line,_$[$0-4].first_column),true,[],_$[$0-4].first_line,_$[$0-4].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR AT VAR IN VAR","{ range_for.val = new for_query.default(VAR.valLex,VAR.valLex,new variable_query.default(VAR.val,[]),true); }"));
                
break;
case 27:

                    this.$ = [[new variable_query.default($$[$0-5],[],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-3],new variable_query.default($$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column),true,[],_$[$0-5].first_line,_$[$0-5].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-5],[],_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-3],new variable_query.default($$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column),true,[],_$[$0-5].first_line,_$[$0-5].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR AT VAR IN VAR opcion_xpath","{ range_for.val = new for_query.default(VAR.valLex,VAR.valLex,new variable_query.default(VAR.val,opcion_xpath.val),true); }"));
                
break;
case 28:

                    this.$ = [[new variable_query.default($$[$0-6],[],_$[$0-6].first_line,_$[$0-6].first_column),'',[",",$$[$0-3],$$[$0-1]],false,[],_$[$0-6].first_line,_$[$0-6].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-6],[],_$[$0-6].first_line,_$[$0-6].first_column),'',[",",$$[$0-3],$$[$0-1]],false,[],_$[$0-6].first_line,_$[$0-6].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR IN PARA e COMA e PARC","{ range_for.val = new for_query.default(VAR.valLex,'',[',',e.val,e.val],false); }"));
                
break;
case 29:

                    this.$ = [[new variable_query.default($$[$0-6],[],_$[$0-6].first_line,_$[$0-6].first_column),'',["to",$$[$0-3],$$[$0-1]],false,[],_$[$0-6].first_line,_$[$0-6].first_column]];
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-6],[],_$[$0-6].first_line,_$[$0-6].first_column),'',["to",$$[$0-3],$$[$0-1]],false,[],_$[$0-6].first_line,_$[$0-6].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR IN PARA e TO e PARC","{ range_for.val = new for_query.default(VAR.valLex,'',['to',e.val,e.val],false); }"));
                
break;
case 30:

                    this.$ = [[new variable_query.default($$[$0-8],[],_$[$0-8].first_line,_$[$0-8].first_column),$$[$0-6],[",",$$[$0-3],$$[$0-1]],true,[],_$[$0-8].first_line,_$[$0-8].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-8],[],_$[$0-8].first_line,_$[$0-8].first_column),$$[$0-6],[",",$$[$0-3],$$[$0-1]],true,[],_$[$0-8].first_line,_$[$0-8].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR AT VAR IN PARA e COMA e PARC","{ range_for.val = new for_query.default(VAR.valLex,VAR.valLex,[',',e.val,e.val],true); }"));
                
break;
case 31:

                    this.$ = [[new variable_query.default($$[$0-8],[],_$[$0-8].first_line,_$[$0-8].first_column),$$[$0-6],["to",$$[$0-3],$$[$0-1]],true,[],_$[$0-8].first_line,_$[$0-8].first_column]]
                    //this.$ = [new for_query.default(new variable_query.default($$[$0-8],[],_$[$0-8].first_line,_$[$0-8].first_column),$$[$0-6],["to",$$[$0-3],$$[$0-1]],true,[],_$[$0-8].first_line,_$[$0-8].first_column)];
                    reportG.push(new gramatic.default("range_for : VAR AT VAR IN PARA e TO e PARC","{ range_for.val = new for_query.default(VAR.valLex,VAR.valLex,['to',e.val,e.val],true); }"));
                
break;
case 32:

                    this.$ = new where_query.default(new variable_query.default($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("opcion_where : WHERE VAR opcion_xpath","{ opcion_where.val = new where_query.default(new variable_query.default(VAR.valLex,opcion_xpath.val)); }")); 
                
break;
case 33:

                    this.$ = new where_query.default(new variable_query.default($$[$0],[],_$[$0-1].first_line,_$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("opcion_where : WHERE VAR opcion_xpath","{ opcion_where.val = new where_query.default(new variable_query.default(VAR.valLex,[])); }")); 
                
break;
case 34:

                    this.$ = new order_query.default(new variable_query.default($$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column),_$[$0-3].first_line,_$[$0-3].first_column);
                    reportG.push(new gramatic.default("opcion_order : ORDER BY VAR opcion_xpath","{ opcion_order.val = new order_query.default(new variable_query.default(VAR.valLex,opcion_xpath.val)); }")); 
                
break;
case 35:

                    this.$ = new where_query.default(new variable_query.default($$[$0],[],_$[$0-2].first_line,_$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("opcion_order : ORDER BY VAR","{ opcion_order.val = new order_query.default(new variable_query.default(VAR.valLex,[])); }")); 
                
break;
case 36:

                    this.$ = new return_query.default($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("opcion_return : RETURN sub_return","{ opcion_return.val = new return_xquery(sub_return.val); }")); 
                
break;
case 37:

                    this.$ = $$[$0-1];
                    this.$.push($$[$0]);
                    reportG.push(new gramatic.default("sub_return : sub_return range_return","{ sub_return.val = range_return.val;\n sub_return.val.push(range_return.val); }")); 
                
break;
case 38:

                    this.$ = [$$[$0]]
                    reportG.push(new gramatic.default("sub_return : range_return","{ sub_return.val = [range_return.val]; }")); 
                
break;
case 39:

                    this.$ = new subReturn_query.default(new variable_query.default($$[$0],[],_$[$0].first_line,_$[$0].first_column),null,null,null);
                    reportG.push(new gramatic.default("range_return : VAR","{ range_return.val = subReturn_query.default(new variable_query.default(VAR.valLex,[]),null,null,null); }")); 
                
break;
case 40:

                    this.$ = new subReturn_query.default(null,null,null,$$[$0]);
                    reportG.push(new gramatic.default("range_return : opcion_if","{ range_return.val = subReturn_query.default(null,null,null,opcion_if.val); }")); 
                
break;
case 41:

                    this.$ = new subReturn_query.default(new variable_query.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column),null,null,null);
                    reportG.push(new gramatic.default("range_return : VAR opcion_xpath","{ range_return.val = subReturn_query.default(new variable_query.default(VAR.valLex,opcion_xpath.val),null,null,null); }"));
                
break;
case 42:

                    this.$ = new subReturn_query.default(null,$$[$0-1],null,null);
                    reportG.push(new gramatic.default("range_return : PARA e PARC","{ range_return.val = subReturn_query.default(null,e.val,null,null); }"));
                
break;
case 43:

                    this.$ = new subReturn_query.default(null,null,$$[$0-1],null);
                    reportG.push(new gramatic.default("range_return : PARA opcion_function PARC","{ range_return.val = subReturn_query.default(null,null,opcion_function.val,null); }"));
                
break;
case 44:

                    this.$ = new subReturn_query.default(new variable_query.default($$[$0-1],[],_$[$0-2].first_line,_$[$0-2].first_column),null,null,null);
                    reportG.push(new gramatic.default("range_return : LLAVEA VAR LLAVEC","{ range_return.val = subReturn_query.default(new variable_query.default(VAR.valLex,[]),null,null,null); }"));
                
break;
case 45:

                    this.$ = new subReturn_query.default(null,null,new nativa_query.default($$[$0-3],[new variable_query.default($$[$0-1],[],_$[$0-3].first_line,_$[$0-3].first_column)],_$[$0-3].first_line,_$[$0-3].first_column),null);
                    reportG.push(new gramatic.default("range_return : DATA PARA VAR PARC","{ range_return.val = subReturn_query.default(null,null,new nativa_query.default(DATA.valLex,new variable_query.default(VAR.valLex,[])),null); }"));
                
break;
case 46:

                    this.$ = new subReturn_query.default(new variable_query.default($$[$0-1],[],_$[$0-3].first_line,_$[$0-3].first_column),$$[$0-3],null,null);
                    reportG.push(new gramatic.default("range_return : e LLAVEA VAR LLAVEC","{ range_return.val = subReturn_query.default(new variable_query.default(VAR.valLex,[]),e.val,null,null); }"));
                
break;
case 47:

                    this.$ = new subReturn_query.default(new variable_query.default($$[$0-2],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column),null,null,null);
                    reportG.push(new gramatic.default("range_return : LLAVEA VAR opcion_xpath LLAVEC","{ range_return.val = subReturn_query.default(new variable_query.default(VAR.valLex,opcion_xpath.val),null,null,null); }"));
                
break;
case 48:

                    this.$ = new subReturn_query.default(null,null,new nativa_query.default($$[$0-4],[new variable_query.default($$[$0-2],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column)],_$[$0-4].first_line,_$[$0-4].first_column),null);
                    reportG.push(new gramatic.default("range_return : DATA PARA VAR opcion_xpath PARC","{ range_return.val = subReturn_query.default(null,null,new nativa_query.default(DATA.valLex,new variable_query.default(VAR.valLex,opcion_xpath.val)),null); }"));
                
break;
case 49:

                    this.$ = new subReturn_query.default(new variable_query.default($$[$0-2],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0-4],null,null);
                    reportG.push(new gramatic.default("range_return : e LLAVEA VAR opcion_xpath LLAVEC","{ range_return.val = subReturn_query.default(new variable_query.default(VAR.valLex,opcion_xpath),e.val,null,null); }"));
                
break;
case 50:

                    this.$ = new subReturn_query.default(null,null,new nativa_query.default($$[$0-4],[new variable_query.default($$[$0-2],[],_$[$0-5].first_line,_$[$0-5].first_column)],_$[$0-5].first_line,_$[$0-5].first_column),null);
                    reportG.push(new gramatic.default("range_return : LLAVEA DATA PARA VAR PARC LLAVEC","{ range_return.val = subReturn_query.default(null,null,new nativa_query.default(DATA.valLex,new variable_query.default(VAR.valLex,[])),null); }"));
                
break;
case 51:

                    this.$ = new subReturn_query.default(null,$$[$0-6],new nativa_query.default($$[$0-4],[new variable_query.default($$[$0-2],[],_$[$0-6].first_line,_$[$0-6].first_column)],_$[$0-6].first_line,_$[$0-6].first_column),null);
                    reportG.push(new gramatic.default("range_return : e LLAVEA DATA PARA VAR PARC LLAVEC","{ range_return.val = subReturn_query.default(null,e.val,new nativa_query.default(DATA.valLex,new variable_query.default(VAR.valLex,[])),null); }"));
                
break;
case 52:

                    this.$ = new subReturn_query.default(null,null,new nativa_query.default($$[$0-5],[new variable_query.default($$[$0-3],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column)],_$[$0-6].first_line,_$[$0-6].first_column),null);
                    reportG.push(new gramatic.default("range_return : LLAVEA DATA PARA VAR opcion_xpath PARC LLAVEC","{ range_return.val = subReturn_query.default(null,null,new nativa_query.default(DATA.valLex,new variable_query.default(VAR.valLex,opcion_xpath.val)),null); }"));
                
break;
case 53:

                    this.$ = new subReturn_query.default(null,$$[$0-7],new nativa_query.default($$[$0-5],[new variable_query.default($$[$0-3],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column)],_$[$0-7].first_line,_$[$0-7].first_column),null);
                    reportG.push(new gramatic.default("range_return : e LLAVEA DATA PARA VAR opcion_xpath PARC LLAVEC","{ range_return.val = subReturn_query.default(null,e.val,new nativa_query.default(DATA.valLex,new variable_query.default(VAR.valLex,opcion_xpath.val)),null); }"));
                
break;
case 54:

                    this.$ = new function_query.default($$[$0-13],$$[$0-11],$$[$0-9],$$[$0-4],$$[$0-2],false,_$[$0-15].first_line,_$[$0-15].first_column);
                    reportG.push(new gramatic.default("opcion_function : DECLARE FUNCTION ID DPTN ID PARA range_function PARC AS XS DPTN types LLAVEA lista_xquery LLAVEC PTCOMA","{ opcion_function.val = new function_query.default(ID.valLex,ID.valLex,range_function.val,types.val,lista_xquery.val,false); }"));
                
break;
case 55:

                    this.$ = new function_query.default($$[$0-9],$$[$0-7],$$[$0-5],'',$$[$0-2],false,_$[$0-11].first_line,_$[$0-11].first_column);
                    reportG.push(new gramatic.default("opcion_function : DECLARE FUNCTION ID DPTN ID PARA range_function PARC LLAVEA lista_xquery LLAVEC PTCOMA","{ opcion_function.val = new function_query.default(ID.valLex,ID.valLex,range_function.val,'',lista_xquery.val,false); }"));
                
break;
case 56:

                    this.$ = new function_query.default($$[$0-12],$$[$0-10],[],$$[$0-4],$$[$0-2],false,_$[$0-14].first_line,_$[$0-14].first_column);
                    reportG.push(new gramatic.default("opcion_function : DECLARE FUNCTION ID DPTN ID PARA PARC AS XS DPTN types LLAVEA lista_xquery LLAVEC PTCOMA","{ opcion_function.val = new function_query.default(ID.valLex,ID.valLex,[],types.val,lista_xquery.val,false); }"));
                
break;
case 57:

                    this.$ = new function_query.default($$[$0-8],$$[$0-6],[],'',$$[$0-2],false,_$[$0-10].first_line,_$[$0-10].first_column);
                    reportG.push(new gramatic.default("opcion_function : DECLARE FUNCTION ID DPTN ID PARA PARC LLAVEA lista_xquery LLAVEC PTCOMA","{ opcion_function.val = new function_query.default(ID.valLex,ID.valLex,[],'',lista_xquery.val,false); }"));
                
break;
case 58:

                    this.$ = new function_query.default($$[$0-5],$$[$0-3],$$[$0-1],'',[],true,_$[$0-5].first_line,_$[$0-5].first_column);
                    reportG.push(new gramatic.default("opcion_function : ID DPTN ID PARA parametros PARC","{ opcion_function.val = new function_query.default(ID.valLex,ID.valLex,parametros.val,'',[],true); }"));
                
break;
case 59:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_function : function_nativa","{ opcion_function.val = function_nativa.val; }"));  
                
break;
case 60:

                    this.$ = $$[$0-2].concat($$[$0]);
                    reportG.push(new gramatic.default("range_function : range_function COMA range_function","{ range_function.val = range_functionP.val.concat(range_functioP.val); }"));  
                
break;
case 61:

                    this.$ = [[new variable_query.default($$[$0-4],[],_$[$0-4].first_line,_$[$0-4].first_column),$$[$0]]];
                    reportG.push(new gramatic.default("range_function : VAR AS XS DPTN types","{ range_function.val = [[VAR.valLex,types.val]]; }"));  
                
break;
case 62:

                    this.$ = new nativa_query.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
                    reportG.push(new gramatic.default("function_nativa : ID PARA parametros PARC","{ function_nativa.val = new nativa_query.default(ID.valLex,parametros.val); }"));  
                
break;
case 63:

                    let id = $$[$0-5] + "-" + $$[$0-3];
                    this.$ = new nativa_query.default(id,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
                    reportG.push(new gramatic.default("function_nativa : ID MENOS ID PARA parametros PARC","{ let id = ID.valLex + '-' + ID.valLex;\n function_nativa.val = new nativa_query.default(id,parametros.val); }")); 
                
break;
case 64:

                    this.$ = new nativa_query.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
                    reportG.push(new gramatic.default("function_nativa : DATA PARA parametros PARC","{ function_nativa.val = new nativa_query.default(DATA.val,parametros.val); }")); 
                
break;
case 65:

                    this.$ = $$[$0-2].concat($$[$0]);
                    reportG.push(new gramatic.default("parametros : parametros COMA parametros","{ parametros.val = prametrosP.val.concat(parametrosP.val); }"));
                
break;
case 66:

                    this.$ = [$$[$0]];
                    reportG.push(new gramatic.default("parametros : e","{ parametros.val = [e.val]; }"));
                
break;
case 67:

                    this.$ = [new variable_query.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column)];
                    reportG.push(new gramatic.default("parametros : VAR opcion_xpath","{ parametros.val = [new variable_query.default(VAR.valLex,opcion_xpath.val)]; }"));
                
break;
case 68:

                    this.$ = [new variable_query.default('',$$[$0],_$[$0].first_line,_$[$0].first_column)];
                    reportG.push(new gramatic.default("parametros : opcion_xpath","{ parametros.val = [new variable_query.default('',opcion_xpath.val)]; }"));
                
break;
case 69:

                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("types : STRING QUESTION","{ types.val = BOOLEAN.valLex; }"));
                
break;
case 70:

                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("types : INTEGER QUESTION","{ types.val = INTEGER.valLex; }"));
                
break;
case 71:

                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("types : DECIMAL QUESTION","{ types.val = DECIMAL.valLex; }"));
                
break;
case 72:

                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("types : DOUBLE QUESTION","{ types.val = DOUBLE.valLex; }"));
                
break;
case 73:

                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("types : BOOLEAN QUESTION","{ types.val = BOOLEAN.valLex; }"));
                
break;
case 74:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("types : STRING","{ types.val = STRING.valLex; }"));
                
break;
case 75:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("types : INTEGER","{ types.val = INTEGER.valLex; }"));
                
break;
case 76:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("types : DECIMAL","{ types.val = DECIMAL.valLex; }"));
                
break;
case 77:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("types : DOUBLE","{ types.val = DOUBLE.valLex; }"));
                
break;
case 78:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("types : BOOLEAN","{ types.val = BOOLEAN.valLex; }"));
                
break;
case 79:

                    this.$ = new if_query.default($$[$0-3],$$[$0],[],_$[$0-5].first_line,_$[$0-5].first_column);
                    reportG.push(new gramatic.default("opcion_if : IF PARA e PARC THEN lista_xquery","{ opcion_if.val = new if_query.default(e.val,lista_xquery.val,[]); }"));
                
break;
case 80:

                    this.$ = new if_query.default($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
                    reportG.push(new gramatic.default("opcion_if : IF PARA e PARC THEN lista_xquery ELSE lista_xquery","{ opcion_if.val = new if_query.default(e.val,lista_xquery.val,lista_xquery.val); }"));
                
break;
case 81:

                    this.$ = new if_query.default($$[$0-5],$$[$0-2],[$$[$0]],_$[$0-7].first_line,_$[$0-7].first_column);
                    reportG.push(new gramatic.default("opcion_if : IF PARA e PARC THEN lista_xquery ELSE opcion_if","{ opcion_if.val = new if_query.default(e.val,lista_xquery.val,[opcion_if.val]); }"));
                
break;
case 82:

                    this.$ = $$[$0-2];
                    this.$.push($$[$0]);
                    reportG.push(new gramatic.default("opcion_xpath : opcion_xpath SEVERAL lista_select","{ opcion_xpath.val = opcion_xpathP.val;\n opcion_xpath.val.push(lista_select.val); }"));
                
break;
case 83:

                    this.$ = [$$[$0]];
                    reportG.push(new gramatic.default("opcion_xpath : lista_select","{ opcion_xpath.val = new Array();\n opcion_xpath.val.push(lista_select.val); }"));
                
break;
case 84:
 
                    this.$ = $$[$0-1];
                    this.$.push($$[$0]);
                    reportG.push(new gramatic.default("lista_select : lista_select select","{ lista_select.val = lista_selectP.val;\n lista_select.val.push(select.val); }"));
                
break;
case 85:

                    this.$ = [$$[$0]];
                    reportG.push(new gramatic.default("lista_select : select","{ lista_select.val = new Array();\n lista_select.val.push(select.val); }"));
                
break;
case 86:

                    this.$ = new select.default("/",$$[$0],false,_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("select : DIV ID","{ select.val = new select.default('/',ID.valLex,false) }"));
                
break;
case 87:

                    this.$ = new select.default("//",$$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ID","{ select.val = new select.default('//',ID.valLex,false) }"));
                
break;
case 88:

                    this.$ = new select.default("/",$$[$0],true,_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("select : DIV ATR ID","{ select.val = new select.default('/',ID.valLex,true) }"));
                
break;
case 89:

                    this.$ = new select.default("//",$$[$0],true,_$[$0-3].first_line,_$[$0-3].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ATR ID","{ select.val = new select.default('//',ID.valLex,true) }"));
                
break;
case 90:

                    this.$ = new select.default("/","*",false,_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("select : DIV MULTI","{ select.val = new select.default('/',*,false) }"));
                
break;
case 91:

                    this.$ = new select.default("//","*",false,_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ATR MULTI","{ select.val = new select.default('//','*',false) }"));
                
break;
case 92:

                    this.$ = new select.default("/",null,true,_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("select : DIV ATR MULTI","{ select.val = new select.default('/',null,true) }"));
                
break;
case 93:

                    this.$ = new select.default("//",null,true,_$[$0-3].first_line,_$[$0-3].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ATR MULTI","{ select.val = new select.default('//',null,true) }"));
                
break;
case 94:

                    this.$ = new predicate.default(new select.default("/",$$[$0-3],false,_$[$0-4].first_line,_$[$0-4].first_column,null),$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
                    reportG.push(new gramatic.default("select : DIV ID CORA e CORC","{ select.val = new predicate.default(new select.default('/',ID.valLex,false,null),e.val) }"));
                
break;
case 95:

                    this.$ = new predicate.default(new select.default("//",$$[$0-3],false,_$[$0-5].first_line,_$[$0-5].first_column,null),$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ID CORA e CORC","{ select.val = new predicate.default(new select.default('//',ID.valLex,false,null),e.val) }"));
                
break;
case 96:

                    this.$ = new predicate.default(null,$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("select : DIV e","{ select.val = new predicate.default(null,e.val) }"));
                
break;
case 97:

                    this.$ = new predicate.default(null,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV e","{ select.val = new predicate.default(null,e.val) }"));
                
break;
case 98:

                    this.$ = new axes.default("/",$$[$0-3],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
                    reportG.push(new gramatic.default("select : DIV ID DPTN DPTN ID","{ select.val = new axes.default('/',ID.valLex,'ID.valLex') }"));
                
break;
case 99:

                    this.$ = new axes.default("/",$$[$0-3],"*",_$[$0-4].first_line,_$[$0-4].first_column);
                    reportG.push(new gramatic.default("select : DIV ID DPTN DPTN MULTI","{ select.val = new axes.default('/',ID.valLex,'*') }"));
                
break;
case 100:

                    this.$ = new axes.default("//",$$[$0-3],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ID DPTN DPTN ID","{ select.val = new axes.default('//',ID.valLex,ID.valLex) }"));
                
break;
case 101:

                    this.$ = new axes.default("//",$$[$0-3],"*",_$[$0-5].first_line,_$[$0-5].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ID DPTN DPTN MULTI","{ select.val = new axes.default('//',ID.valLex,'*') }"));
                
break;
case 102:

                    this.$ = new predicate.default(new axes.default("/",$$[$0-6],$$[$0-3],_$[$0-7].first_line,_$[$0-7].first_column),$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column)
                    reportG.push(new gramatic.default("select : DIV ID DPTN DPTN ID CORA e CORC","{ select.val = new axes.default('/',ID.valLex,'ID.valLex') }"));
                
break;
case 103:

                    this.$ = new predicate.default(new axes.default("//",$$[$0-6],$$[$0-3],_$[$0-8].first_line,_$[$0-8].first_column),$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column)
                    reportG.push(new gramatic.default("select : DIV DIV ID DPTN DPTN ID CORA e CORC","{ select.val = new axes.default('//',ID.valLex,ID.valLex) }"));
                
break;
case 104:

                    this.$ = new axes.default("/","self","*",_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("select : DIV PTN","{ select.val = new axes.default('/',ID.valLex,'*') }"));
                
break;
case 105:

                    this.$ = new axes.default("//","self","*",_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV PTN","{ select.val = new axes.default('//',ID.valLex,'*') }"));
                
break;
case 106:

                    this.$ = new axes.default("/","parent","*",_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("select : DIV PTN","{ select.val = new axes.default('/',ID.valLex,'*') }"));
                
break;
case 107:

                    this.$ = new axes.default("//","..","*",_$[$0-3].first_line,_$[$0-3].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV PTN","{ select.val = new axes.default('//',ID.valLex,'*') }"));
                
break;
case 108:

                    this.$ = new axes.default("/",$$[$0-2]+"()","*",_$[$0-3].first_line,_$[$0-3].first_column);
                    reportG.push(new gramatic.default("select : DIV ID PARA PARC","{ select.val = new axes.default('/',ID.valLex,'*') }"));
                
break;
case 109:

                    this.$ = new axes.default("//",$$[$0-2]+"()","*",_$[$0-4].first_line,_$[$0-4].first_column);
                    reportG.push(new gramatic.default("select : DIV DIV ID PARA PARC","{ select.val = new axes.default('//',ID.valLex,'*') }"));
                
break;
case 110:

                    this.$ = new variable_query.default($$[$0],[],_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : VAR","{ e.val = new variable_query.default(VAR.valLex,[]); }"));
                
break;
case 111:

                    this.$ = new primitivo.default(Number($$[$0]),_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : NUM","{ e.val = new primitivo.default(Number(NUM.valLex)) }"));
                
break;
case 112:

                    $$[$0] = $$[$0].slice(1, $$[$0].length-1);
                    this.$ = new primitivo.default($$[$0],_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : CADENA","{ e.val = new primitivo.default(CADENA.valLex) }"));
                
break;
case 113:

                    this.$ = new last.default(_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("e : LAST PARA PARC","{ e.val = new last.default() }"));
                
break;
case 114:

                    this.$ = new position.default(_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("e : POSITION PARA PARC","{ e.val = new position.default() }"));
                
break;
case 115:

                    this.$ = new filtro.default($$[$0],_$[$0].first_line,_$[$0].first_column,false);
                    reportG.push(new gramatic.default("e : ID","{ e.val = new filtro.default(ID.valLex,false) }"));
                
break;
case 116:

                    this.$ = new filtro.default($$[$0],_$[$0-1].first_line,_$[$0-1].first_column,true);
                    reportG.push(new gramatic.default("e : ATR ID","{ e.val = new filtro.default(ID.valLex,true) }"));
                
break;
case 117:

                    this.$ = new primitivo.default(true,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : TRUE","{ e.val = new primitivo.default(true) }"));
                
break;
case 118:

                    this.$ = new primitivo.default(false,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : FALSE","{ e.val = new primitivo.default(false) }"));
                
break;
case 119:

                    this.$ = new aritmetica.default($$[$0-2],"+",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MAS e","{ e.val = new aritmetica.default(e.val,'+',e.val,false) }"));
                
break;
case 120:

                    this.$ = new aritmetica.default($$[$0-2],"-",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENOS e","{ e.val = new aritmetica.default(e.val,'-',e.val,false) }"));
                
break;
case 121:

                    this.$ = new aritmetica.default($$[$0-2],"*",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MULTI e","{ e.val = new aritmetica.default(e.val,'*',e.val,false) }"));
                
break;
case 122:

                    this.$ = new aritmetica.default($$[$0-2],"/",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e DIV e","{ e.val = new aritmetica.default(e.val,'/',e.val,false) }"));
                
break;
case 123:

                    this.$ = new aritmetica.default($$[$0-2],"%",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MODULO e","{ e.val = new aritmetica.default(e.val,'%',e.val,false) }"));
                
break;
case 124:

                    this.$ = new aritmetica.default($$[$0],"UNARIO",null,_$[$0-1].first_line,_$[$0-1].first_column,true);
                    reportG.push(new gramatic.default("e : MENOS e","{ e.val = new aritmetica.default(e.val,'-',null,true) }"));
                
break;
case 125:

                    this.$ = new relacional.default($$[$0-2],"<",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENORQUE e","{ e.val = new relacional.default(e.val,'<',e.val,false) }"));
                
break;
case 126:

                    this.$ = new relacional.default($$[$0-2],">",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MAYORQUE e","{ e.val = new relacional.default(e.val,'>',e.val,false) }"));
                
break;
case 127:

                    this.$ = new relacional.default($$[$0-2],"<=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENORIGUAL e","{ e.val = new relacional.default(e.val,'<=',e.val,false) }"));
                
break;
case 128:

                    this.$ = new relacional.default($$[$0-2],">=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MAYORIGUAL e","{ e.val = new relacional.default(e.val,'>=',e.val,false) }"));
                
break;
case 129:
 
                    this.$ = new relacional.default($$[$0-2],"=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e IGUAL e","{ e.val = new relacional.default(e.val,'=',e.val,false) }"));
                
break;
case 130:

                    this.$ = new relacional.default($$[$0-2],"=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e IGUALIGUAL e","{ e.val = new relacional.default(e.val,'=',e.val,false) }"));
                
break;
case 131:

                    this.$ = new relacional.default($$[$0-2],"!=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e DIFERENTE e","{ e.val = new relacional.default(e.val,'!=',e.val,false) }"));
                
break;
case 132:

                    this.$ = new relacional.default($$[$0-2],"eq",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e IGUALU e","{ e.val = new relacional.default(e.val,'eq',e.val,false) }"));
                
break;
case 133:

                    this.$ = new relacional.default($$[$0-2],"ne",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e DIFERENTEU e","{ e.val = new relacional.default(e.val,'ne',e.val,false) }"));
                
break;
case 134:

                    this.$ = new relacional.default($$[$0-2],"le",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENORQUEIU e","{ e.val = new relacional.default(e.val,'le',e.val,false) }"));
                
break;
case 135:

                    this.$ = new relacional.default($$[$0-2],"lt",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENORQUEU e","{ e.val = new relacional.default(e.val,'lt',e.val,false) }"));
                
break;
case 136:

                    this.$ = new relacional.default($$[$0-2],"ge",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MAYORQUEIU e","{ e.val = new relacional.default(e.val,'ge',e.val,false) }"));
                
break;
case 137:

                    this.$ = new relacional.default($$[$0-2],"gt",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MAYORQUEU e","{ e.val = new relacional.default(e.val,'gt',e.val,false) }"));
                
break;
case 138:

                    this.$ = new logica.default($$[$0-2],"||",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e OR e","{ e.val = new logica.default(e.val,'&&',e.val,false) }"));
                
break;
case 139:

                    this.$ = new logica.default($$[$0-2],"&&",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e AND e","{ e.val = new logica.default(e.val,'&&',e.val,false) }"));
                
break;
case 140:

                    this.$ = new logica.default($$[$0],"!",null,_$[$0-1].first_line,_$[$0-1].first_column,true);
                    reportG.push(new gramatic.default("e : NOT e","{ e.val = new logica.default(e.val,'!',null,true) }"));
                
break;
case 141:

                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("e : PARA e PARC","{ e.val = NUM.valLex }"));
                
break;
case 142:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("e : opcion_function","{ e.val = opcion_function.val; }"));
                
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{1:[3]},{5:[1,37],6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($Vl,[2,3]),o($Vm,[2,4],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($Vl,[2,5]),o($Vl,[2,6],{58:$VH}),o($VI,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($VJ,$VK,{59:26,60:34,9:60,61:$Vc}),o($VL,[2,111]),o($VL,[2,112]),{21:[1,61]},{21:[1,62]},o([5,16,17,19,22,23,24,26,29,30,32,35,36,37,38,40,55,57,58,61,62,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VM,{18:[1,63],21:[1,64],48:$VN}),{40:[1,66]},o($VL,[2,117]),o($VL,[2,118]),{7:67,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:70,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:71,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{16:[1,72]},o($VP,[2,83],{60:73,61:$Vc}),{39:[1,74]},o($VL,[2,59]),{16:$VQ,25:75},{16:[1,77]},{31:[1,78]},{7:86,10:69,15:82,16:$VR,21:$VS,33:79,34:80,35:$VT,37:$VU,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{21:[1,87]},o($VV,[2,85]),{21:[1,88]},{7:93,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:[1,89],47:28,48:$Va,61:[1,90],62:[1,91],63:[1,92],66:[1,94],67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{1:[2,1]},o($Vl,[2,2]),{7:95,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:96,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:97,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:98,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:99,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:100,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:101,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:102,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:103,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:104,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:105,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:106,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:107,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:108,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:109,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:110,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:111,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:112,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:113,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:114,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{59:115,60:34,61:$Vc},o($Vl,[2,13],{58:$VH}),{23:[1,116]},{23:[1,117]},{40:$VW},{7:120,9:122,10:69,16:$VX,21:$V2,37:$V7,38:$V8,40:$V9,46:119,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{40:[1,123]},o($VL,$VY),o($VZ,[2,124],{82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($VL,$VK),o($VL,$V_),o($V$,[2,140],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),{19:$Vn,23:$V01,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{18:[1,125]},o($VV,[2,84]),{40:[1,126]},{4:127,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,26:$V11,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{27:[1,129],28:[1,130]},o($V21,[2,33],{59:26,60:34,9:131,61:$Vc}),{16:[1,132]},o([5,17,24,29,30,32,36,57,61],[2,36],{47:28,10:69,15:82,7:86,34:133,16:$VR,21:$VS,35:$VT,37:$VU,38:$V8,40:$V9,48:$Va,55:$Vb,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk}),o($Vl,[2,38]),o($VJ,[2,39],{59:26,60:34,9:134,61:$Vc}),o($Vl,[2,40]),{7:135,10:136,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{16:[1,137],37:[1,138]},{21:[1,139]},{19:$Vn,35:[1,140],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{7:141,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:120,9:122,10:69,16:$VX,21:$V2,37:$V7,38:$V8,40:$V9,46:142,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($V31,[2,86],{18:[1,144],19:$VM,63:$VM,73:$VM,74:$VM,75:$VM,76:$VM,77:$VM,78:$VM,79:$VM,80:$VM,81:$VM,82:$VM,83:$VM,84:$VM,85:$VM,86:$VM,87:$VM,88:$VM,89:$VM,21:[1,145],48:$VN,64:[1,143]}),{7:149,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:[1,146],47:28,48:$Va,62:[1,147],63:[1,148],66:[1,150],67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{40:[1,151],63:[1,152]},o($VV,[2,90]),o($V41,[2,96],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($VV,[2,104],{66:[1,153]}),o($V51,[2,119],{63:$Vp,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V51,[2,120],{63:$Vp,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($VZ,[2,121],{82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($VZ,[2,122],{82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($VZ,[2,123],{82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V61,[2,125],{48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V61,[2,126],{48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V61,[2,127],{48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V61,[2,128],{48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V61,[2,129],{48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V61,[2,130],{48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V61,[2,131],{48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($V71,[2,132],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($V71,[2,133],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($V71,[2,134],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($V71,[2,135],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($V71,[2,136],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($V71,[2,137],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o([5,16,17,21,22,23,24,26,29,30,32,35,36,37,38,40,55,57,58,61,62,65,67,68,69,70,71,72,88,90],[2,138],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,89:$VG}),o($V$,[2,139],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE}),o($VP,[2,82],{60:73,61:$Vc}),o($VL,[2,113]),o($VL,[2,114]),{21:[1,154]},{23:[1,155],26:$V81},o($V91,[2,66],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o([19,23,26,48,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VK,{59:26,60:34,9:157,61:$Vc}),o($V91,[2,68],{58:$VH}),{21:[1,158]},o($VL,[2,141]),{19:[1,159]},{18:[1,160]},o($Va1,[2,20],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,59:26,47:28,60:34,6:38,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,48:$Va,55:$Vb,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk}),{16:$VQ,25:161},{9:162,16:[1,163],21:[1,164],59:26,60:34,61:$Vc},{16:[1,165]},o($Vl,[2,32],{58:$VH}),o($V21,[2,35],{59:26,60:34,9:166,61:$Vc}),o($Vl,[2,37]),o($Vl,[2,41],{58:$VH}),{19:$Vn,23:[1,167],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},o([19,48,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$V_,{23:[1,168]}),{9:170,36:[1,169],59:26,60:34,61:$Vc},{21:[1,171]},{7:120,9:122,10:69,16:[1,172],21:$V2,37:$V7,38:$V8,40:$V9,46:142,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{16:[1,173],37:[1,174]},{19:$Vn,23:[1,175],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{23:[1,176],26:$V81},{7:177,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{18:[1,178],40:$VW},{7:120,9:122,10:69,16:$VX,21:$V2,23:[1,179],37:$V7,38:$V8,40:$V9,46:119,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($V31,[2,87],{18:[1,181],19:$VM,63:$VM,73:$VM,74:$VM,75:$VM,76:$VM,77:$VM,78:$VM,79:$VM,80:$VM,81:$VM,82:$VM,83:$VM,84:$VM,85:$VM,86:$VM,87:$VM,88:$VM,89:$VM,21:[1,182],48:$VN,64:[1,180]}),{40:[1,183],63:[1,184]},o($VV,[2,91]),o($V41,[2,97],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),o($VV,[2,105],{66:[1,185]}),o($VV,[2,88],{19:$VY,63:$VY,73:$VY,74:$VY,75:$VY,76:$VY,77:$VY,78:$VY,79:$VY,80:$VY,81:$VY,82:$VY,83:$VY,84:$VY,85:$VY,86:$VY,87:$VY,88:$VY,89:$VY}),o($VV,[2,92]),o($VV,[2,106]),{7:120,9:122,10:69,16:$VX,21:$V2,37:$V7,38:$V8,40:$V9,46:186,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($VL,[2,62]),{7:120,9:122,10:69,16:$VX,21:$V2,37:$V7,38:$V8,40:$V9,46:187,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($V91,$Vb1,{58:$VH}),{7:120,9:122,10:69,16:$VX,21:$V2,37:$V7,38:$V8,40:$V9,46:188,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:190,10:69,16:$VO,20:189,21:[1,191],37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{40:[1,192]},o([16,17,21,24,29,30,32,37,38,40,48,55,61,62,67,68,69,70,71,72,90],[2,21],{26:$V11}),o($Vc1,[2,22],{58:$VH}),o($Vd1,[2,23],{59:26,60:34,9:193,61:$Vc}),{7:194,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{27:[1,195]},o($Vl,[2,34],{58:$VH}),o($VI,[2,42]),o($Vl,[2,43]),o($Vl,[2,44]),{36:[1,196],58:$VH},{16:[1,197]},o([19,26,48,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VK,{59:26,60:34,9:199,23:[1,198],61:$Vc}),{9:201,36:[1,200],59:26,60:34,61:$Vc},{21:[1,202]},{56:[1,203]},o($VL,[2,64]),{19:$Vn,48:$Vo,63:$Vp,65:[1,204],73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{40:[1,205],63:[1,206]},o($VV,[2,108]),{7:207,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{18:[1,208],40:$VW},{7:120,9:122,10:69,16:$VX,21:$V2,23:[1,209],37:$V7,38:$V8,40:$V9,46:119,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($VV,[2,89],{19:$VY,63:$VY,73:$VY,74:$VY,75:$VY,76:$VY,77:$VY,78:$VY,79:$VY,80:$VY,81:$VY,82:$VY,83:$VY,84:$VY,85:$VY,86:$VY,87:$VY,88:$VY,89:$VY}),o($VV,[2,93]),o($VV,[2,107]),{23:[1,210],26:$V81},{23:[2,65],26:$V81},{23:[1,211],26:$V81},o([5,16,17,21,24,29,30,35,36,37,38,40,48,55,57,61,62,67,68,69,70,71,72,90],[2,14],{14:212,32:$V6}),o($Vm,[2,16],{19:$Vn,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG}),{7:213,9:214,10:215,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{21:[1,216]},o($Vc1,[2,24],{58:$VH}),{19:$Vn,22:[1,218],26:[1,217],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{9:219,16:[1,220],21:[1,221],59:26,60:34,61:$Vc},o($Vl,[2,47]),{9:223,23:[1,222],59:26,60:34,61:$Vc},o($Vl,[2,45]),{23:[1,224],26:$Vb1,58:$VH},o($Vl,[2,46]),{36:[1,225],58:$VH},{16:[1,226]},{4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($VV,[2,94]),o($VV,[2,98],{64:[1,228]}),o($VV,[2,99]),{19:$Vn,48:$Vo,63:$Vp,65:[1,229],73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{40:[1,230],63:[1,231]},o($VV,[2,109]),o($VL,[2,58]),o($VL,[2,63]),o($Vl,[2,15]),{19:$Vn,22:[1,232],23:$V01,48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{23:[1,233],58:$VH},o([19,22,48,63,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$V_,{23:[1,234]}),{16:$Ve1,23:[1,236],41:235},{7:238,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:239,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($Vc1,[2,25],{58:$VH}),o($Vd1,[2,26],{59:26,60:34,9:240,61:$Vc}),{7:241,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{36:[1,242]},{23:[1,243],58:$VH},o($Vl,[2,48]),o($Vl,[2,49]),{9:245,23:[1,244],59:26,60:34,61:$Vc},o([5,35,36],[2,79],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,59:26,47:28,60:34,6:38,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,48:$Va,55:$Vb,57:[1,246],61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk}),{7:247,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($VV,[2,95]),o($VV,[2,100],{64:[1,248]}),o($VV,[2,101]),{7:249,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($Vl,[2,18]),o($Vl,[2,19]),{23:[1,250],26:$Vf1},{35:[1,253],42:[1,252]},{42:[1,254]},{19:$Vn,23:[1,255],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{19:$Vn,23:[1,256],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},o($Vc1,[2,27],{58:$VH}),{19:$Vn,22:[1,258],26:[1,257],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},o($Vl,[2,50]),{36:[1,259]},{36:[1,260]},{23:[1,261],58:$VH},{4:262,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:263,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{19:$Vn,48:$Vo,63:$Vp,65:[1,264],73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{7:265,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{19:$Vn,23:[1,266],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{35:[1,268],42:[1,267]},{16:$Ve1,41:269},{43:[1,270]},{4:271,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{43:[1,272]},o($Vc1,[2,28]),o($Vc1,[2,29]),{7:273,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{7:274,10:69,16:$VO,21:$V2,37:$V7,38:$V8,40:$V9,47:28,48:$Va,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($Vl,[2,52]),o($Vl,[2,51]),{36:[1,275]},o($Va1,[2,80],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,59:26,47:28,60:34,6:38,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,48:$Va,55:$Vb,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk}),o($Vl,[2,81]),o($VV,[2,102]),{19:$Vn,48:$Vo,63:$Vp,65:[1,276],73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},o($Vl,[2,17]),{43:[1,277]},{4:278,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{23:[2,60],26:$Vf1},{18:[1,279]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,36:[1,280],37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{18:[1,281]},{19:$Vn,23:[1,282],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},{19:$Vn,23:[1,283],48:$Vo,63:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG},o($Vl,[2,53]),o($VV,[2,103]),{18:[1,284]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,36:[1,285],37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{44:286,49:$Vg1,51:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1},{45:[1,292]},{44:293,49:$Vg1,51:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1},o($Vc1,[2,30]),o($Vc1,[2,31]),{44:294,49:$Vg1,51:$Vh1,52:$Vi1,53:$Vj1,54:$Vk1},{45:[1,295]},{35:[1,296]},o($Vl1,[2,74],{50:[1,297]}),o($Vl1,[2,75],{50:[1,298]}),o($Vl1,[2,76],{50:[1,299]}),o($Vl1,[2,77],{50:[1,300]}),o($Vl1,[2,78],{50:[1,301]}),o($VL,[2,57]),o($V91,[2,61]),{35:[1,302]},o($VL,[2,55]),{4:303,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},o($Vl1,[2,69]),o($Vl1,[2,70]),o($Vl1,[2,71]),o($Vl1,[2,72]),o($Vl1,[2,73]),{4:304,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,36:[1,305],37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,17:$V1,21:$V2,24:$V3,29:$V4,30:$V5,32:$V6,36:[1,306],37:$V7,38:$V8,40:$V9,47:28,48:$Va,55:$Vb,59:26,60:34,61:$Vc,62:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,90:$Vk},{45:[1,307]},{45:[1,308]},o($VL,[2,56]),o($VL,[2,54])],
defaultActions: {37:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    /* Xpath */
    const ast_xpath = require('../clases/ast/ast_xpath')
    const select = require('../clases/expresiones/select')
    const predicate = require('../clases/expresiones/predicates/predicate')
    const last = require('../clases/expresiones/predicates/last')
    const position = require('../clases/expresiones/predicates/position')
    const filtro = require('../clases/expresiones/predicates/filtro')
    const axes = require('../clases/expresiones/axes/axes')

    /* Xquery */
    const if_query = require('../clases/instrucciones/xquery/if')
    const for_query = require('../clases/instrucciones/xquery/for')
    const let_query = require('../clases/instrucciones/xquery/let')
    const order_query = require('../clases/instrucciones/xquery/order')
    const where_query = require('../clases/instrucciones/xquery/where')
    const nativa_query = require('../clases/instrucciones/xquery/nativa')
    const return_query = require('../clases/instrucciones/xquery/return')
    const variable_query = require('../clases/instrucciones/xquery/variable')
    const function_query = require('../clases/instrucciones/xquery/function')
    const subReturn_query = require('../clases/instrucciones/xquery/subReturn')

    /* Operaciones */
    const aritmetica = require('../clases/expresiones/operaciones/aritmetica')
    const relacional = require('../clases/expresiones/operaciones/relacional')
    const logica = require('../clases/expresiones/operaciones/logica')

    /* Primitivos */
    const primitivo = require('../clases/expresiones/primitivo')

    /* Reporte erroes */
    const rep_error = require('../reports/ReportController');

    /* Reporte Gramatical */
    const gramatic = require('../reports/gramatical');
    let reportG = new Array();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip comments*/
break;
case 1: return 58 
break;
case 2: return 21 
break;
case 3: return 23 
break;
case 4: return 64 
break;
case 5: return 65 
break;
case 6: return 35 
break;
case 7: return 36 
break;
case 8: return 66 
break;
case 9: return 18 
break;
case 10: return 26 
break;
case 11: return 45 
break;
case 12: return 69 
break;
case 13: return 70 
break;
case 14: return 24 
break;
case 15: return 17 
break;
case 16: return 29 
break;
case 17: return 30
break;
case 18: return 31 
break;
case 19: return 32 
break;
case 20: return 55 
break;
case 21: return 56 
break;
case 22: return 57 
break;
case 23: return 28 
break;
case 24: return 22 
break;
case 25: return 27 
break;
case 26: return 37 
break;
case 27: return 38 
break;
case 28: return 39 
break;
case 29: return 43 
break;
case 30: return 42 
break;
case 31: return 73 
break;
case 32: return 48 
break;
case 33: return 63 
break;
case 34: return 61 
break;
case 35: return 74 
break;
case 36: return 'POTENCIA' 
break;
case 37: return 75 
break;
case 38: return 50 
break;
case 39: return 78
break;
case 40: return 79
break;
case 41: return 76
break;
case 42: return 77
break;
case 43: return 81
break;
case 44: return 80
break;
case 45: return 19
break;
case 46: return 82
break;
case 47: return 83
break;
case 48: return 85
break;
case 49: return 84
break;
case 50: return 87
break;
case 51: return 86
break;
case 52: return 88
break;
case 53: return 89
break;
case 54: return 90
break;
case 55: return 62 
break;
case 56: return 49 
break;
case 57: return 51 
break;
case 58: return 52 
break;
case 59: return 53 
break;
case 60: return 54 
break;
case 61: return 71
break;
case 62: return 72
break;
case 63: return 'PRINT' 
break;
case 64: return 67
break;
case 65: return 40
break;
case 66: return 68
break;
case 67: return 16 
break;
case 68:/* skip whitespace */
break;
case 69:return 5
break;
case 70: rep_error.InsertarError("lexico", yy_.yytext, "xquery", yy_.yylloc.first_line, yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[(][:][^:()]*[:][)])/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:for\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:at\b)/i,/^(?:to\b)/i,/^(?:in\b)/i,/^(?:data\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:xs\b)/i,/^(?:as\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:div\b)/i,/^(?:\^)/i,/^(?:mod\b)/i,/^(?:\?)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:!)/i,/^(?:@)/i,/^(?:string\b)/i,/^(?:integer\b)/i,/^(?:decimal\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("([^\"\\])*")))/i,/^(?:([$][a-zñA-ZÑ0-9]+))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xquery;
exports.Parser = xquery.Parser;
exports.parse = function () { return xquery.parse.apply(xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}