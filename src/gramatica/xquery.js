/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,20],$V2=[1,35],$V3=[1,25],$V4=[1,21],$V5=[1,14],$V6=[1,30],$V7=[1,28],$V8=[1,33],$V9=[1,34],$Va=[1,12],$Vb=[1,24],$Vc=[1,26],$Vd=[1,17],$Ve=[1,13],$Vf=[1,15],$Vg=[1,16],$Vh=[1,18],$Vi=[1,19],$Vj=[1,22],$Vk=[1,23],$Vl=[5,18,19,21,24,25,26,30,33,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],$Vm=[1,44],$Vn=[1,45],$Vo=[1,48],$Vp=[1,40],$Vq=[1,41],$Vr=[1,39],$Vs=[1,42],$Vt=[1,43],$Vu=[1,46],$Vv=[1,47],$Vw=[1,49],$Vx=[1,50],$Vy=[1,51],$Vz=[1,52],$VA=[1,53],$VB=[1,54],$VC=[1,55],$VD=[1,56],$VE=[1,57],$VF=[1,58],$VG=[1,64],$VH=[1,65],$VI=[1,63],$VJ=[5,18,19,20,21,23,24,25,26,28,30,31,32,33,35,38,39,41,44,45,54,55,56,64,66,67,71,72,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VK=[2,151],$VL=[5,18,19,23,24,25,26,30,32,33,35,38,39,41,44,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],$VM=[1,84],$VN=[1,85],$VO=[5,18,19,21,23,24,25,26,30,32,33,35,38,39,41,44,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],$VP=[1,126],$VQ=[1,123],$VR=[1,121],$VS=[1,122],$VT=[1,124],$VU=[5,18,19,20,21,23,24,25,26,28,30,31,32,33,35,38,39,41,44,45,54,55,56,64,66,67,71,72,74,76,77,78,79,80,81,82,89,90,91,92,93,94,95,96,97],$VV=[2,155],$VW=[5,19,21,23,24,25,26,30,31,32,33,35,38,39,41,44,45,54,55,64,66,67,71,74,89,90,91,92,93,94,95,96,97],$VX=[1,134],$VY=[2,148],$VZ=[1,137],$V_=[25,38,39,41],$V$=[1,142],$V01=[1,148],$V11=[5,18,19,21,23,24,25,26,32,33,35,38,39,41,44,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],$V21=[5,18,19,20,21,23,24,25,26,28,30,31,32,33,35,38,39,41,44,45,54,55,56,64,66,67,71,74,76,79,80,81,82,89,90,91,92,93,94,95,96,97],$V31=[5,18,19,20,21,23,24,25,26,28,30,31,32,33,35,38,39,41,44,45,54,55,64,66,67,71,74,79,80,81,82,89,90,91,92,93,94,95,96,97],$V41=[5,19,21,23,24,25,26,30,31,32,33,35,38,39,41,44,45,54,55,64,66,67,71,74,91,92,93,94,95,96,97],$V51=[5,18,19,21,23,24,25,26,30,33,44,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],$V61=[1,171],$V71=[39,41],$V81=[1,191],$V91=[32,35],$Va1=[25,35,38,39,41],$Vb1=[18,19],$Vc1=[5,18,19,21,24,25,26,30,33,38,39,41,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],$Vd1=[1,273],$Ve1=[1,292],$Vf1=[1,333],$Vg1=[1,334],$Vh1=[1,335],$Vi1=[1,336],$Vj1=[1,337],$Vk1=[23,32,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_xquery":4,"EOF":5,"opcion_xquery":6,"lista_nodos":7,"e":8,"opcion_if":9,"opcion_let":10,"opcion_xpath":11,"opcion_function":12,"opcion_return":13,"opcion_for":14,"opcion_where":15,"opcion_order":16,"nodo":17,"MENORQUE":18,"ID":19,"MAYORQUE":20,"DIV":21,"lista_valor":22,"LLAVEA":23,"LLAVEC":24,"LET":25,"VAR":26,"DPTN":27,"IGUAL":28,"range_let":29,"PARA":30,"TO":31,"PARC":32,"FOR":33,"range_for":34,"COMA":35,"IN":36,"AT":37,"WHERE":38,"ORDER":39,"BY":40,"RETURN":41,"sub_return":42,"range_return":43,"DATA":44,"DECLARE":45,"FUNCTION":46,"range_function":47,"AS":48,"XS":49,"types":50,"PTCOMA":51,"parametros":52,"function_nativa":53,"SUBSTR":54,"UPPER":55,"MENOS":56,"CASE":57,"STRING":58,"QUESTION":59,"INTEGER":60,"DECIMAL":61,"DOUBLE":62,"BOOLEAN":63,"IF":64,"THEN":65,"ELSE":66,"lista_several":67,"SEVERAL":68,"lista_select":69,"select":70,"ATR":71,"MULTI":72,"CORA":73,"CORC":74,"PTN":75,"MAS":76,"DIVS":77,"MODULO":78,"MENORIGUAL":79,"MAYORIGUAL":80,"IGUALIGUAL":81,"DIFERENTE":82,"IGUALU":83,"DIFERENTEU":84,"MENORQUEIU":85,"MENORQUEU":86,"MAYORQUEIU":87,"MAYORQUEU":88,"OR":89,"AND":90,"NOT":91,"LAST":92,"POSITION":93,"NUM":94,"CADENA":95,"TRUE":96,"FALSE":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"MENORQUE",19:"ID",20:"MAYORQUE",21:"DIV",23:"LLAVEA",24:"LLAVEC",25:"LET",26:"VAR",27:"DPTN",28:"IGUAL",30:"PARA",31:"TO",32:"PARC",33:"FOR",35:"COMA",36:"IN",37:"AT",38:"WHERE",39:"ORDER",40:"BY",41:"RETURN",44:"DATA",45:"DECLARE",46:"FUNCTION",48:"AS",49:"XS",51:"PTCOMA",54:"SUBSTR",55:"UPPER",56:"MENOS",57:"CASE",58:"STRING",59:"QUESTION",60:"INTEGER",61:"DECIMAL",62:"DOUBLE",63:"BOOLEAN",64:"IF",65:"THEN",66:"ELSE",67:"lista_several",68:"SEVERAL",71:"ATR",72:"MULTI",73:"CORA",74:"CORC",75:"PTN",76:"MAS",77:"DIVS",78:"MODULO",79:"MENORIGUAL",80:"MAYORIGUAL",81:"IGUALIGUAL",82:"DIFERENTE",83:"IGUALU",84:"DIFERENTEU",85:"MENORQUEIU",86:"MENORQUEU",87:"MAYORQUEIU",88:"MAYORQUEU",89:"OR",90:"AND",91:"NOT",92:"LAST",93:"POSITION",94:"NUM",95:"CADENA",96:"TRUE",97:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,4],[6,4],[6,4],[6,4],[6,5],[6,5],[7,2],[7,1],[17,8],[17,8],[17,10],[10,5],[29,5],[29,1],[29,3],[14,2],[34,3],[34,3],[34,3],[34,4],[34,5],[34,5],[34,6],[34,7],[34,7],[34,9],[34,9],[15,3],[15,2],[16,4],[16,3],[13,2],[42,2],[42,1],[43,1],[43,2],[43,3],[43,3],[43,3],[43,4],[43,4],[43,4],[43,5],[43,5],[43,6],[43,7],[43,7],[43,8],[43,8],[12,16],[12,12],[12,15],[12,11],[12,6],[12,1],[47,3],[47,5],[53,4],[53,6],[52,3],[52,1],[52,1],[52,2],[50,2],[50,2],[50,2],[50,2],[50,2],[50,1],[50,1],[50,1],[50,1],[50,1],[22,2],[22,1],[9,6],[9,8],[9,8],[11,3],[11,1],[69,2],[69,1],[70,2],[70,3],[70,3],[70,4],[70,2],[70,3],[70,3],[70,4],[70,5],[70,2],[70,6],[70,5],[70,5],[70,6],[70,6],[70,8],[70,9],[70,2],[70,3],[70,3],[70,4],[70,4],[70,5],[8,3],[8,3],[8,3],[8,3],[8,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,2],[8,3],[8,3],[8,3],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{1:[3]},{5:[1,36],6:37,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Vl,[2,3]),o([5,19,21,24,25,26,30,33,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],[2,4],{17:38,18:$V0}),o([5,19,21,24,25,26,30,33,45,54,55,64,66,67,71,91,92,93,94,95,96,97],[2,5],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o($Vl,[2,6]),o([5,18,19,21,24,25,26,30,45,54,55,56,64,66,67,71,91,92,93,94,95,96,97],[2,7],{13:59,14:60,15:61,16:62,33:$V6,38:$VG,39:$VH,41:$VI}),o($Vl,[2,8]),o([5,18,19,20,21,24,25,26,28,30,33,45,54,55,56,64,66,67,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],[2,9]),{10:67,13:66,15:68,16:69,25:$V3,38:$VG,39:$VH,41:$VI},o($Vl,[2,25]),{8:70,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:72,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:73,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{30:[1,74]},{30:[1,75]},{19:[1,76]},o($VJ,[2,149]),o($VJ,[2,150]),o($VJ,$VK,{27:[1,77]}),o($VJ,[2,152]),o($VJ,[2,153]),o($VJ,[2,154]),{30:[1,78]},{26:[1,79]},{68:[1,80]},o($VL,[2,97],{70:81,21:$V2}),{46:[1,82]},o($VJ,[2,72]),{26:$VM,34:83},{19:$VN},o($VO,[2,99]),{30:[1,86]},{56:[1,87]},{8:92,12:71,19:[1,88],21:[1,89],26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:[1,90],72:[1,91],75:[1,93],91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,24]),{8:94,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:95,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:96,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:97,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:98,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:99,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:100,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:101,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:102,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:103,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:104,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:105,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:106,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:107,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:108,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:109,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:110,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:111,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:112,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:113,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Vl,[2,10]),{13:114,15:115,38:$VG,41:$VI},{13:116,16:117,39:$VH,41:$VI},{13:118,41:$VI},{8:125,12:71,18:$VP,19:$V1,23:$VQ,26:$VR,30:$VS,42:119,43:120,44:$VT,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{26:[1,127]},{40:[1,128]},o($Vl,[2,11]),{13:129,15:130,38:$VG,41:$VI},{13:131,16:132,39:$VH,41:$VI},{13:133,41:$VI},o($VU,[2,128],{83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($VJ,$VV),o($VW,[2,144],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),{18:$Vm,20:$Vn,28:$Vo,32:$VX,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{32:[1,135]},{32:[1,136]},o($VJ,$VY),{19:$VZ},{8:138,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{27:[1,139]},{21:$V2,69:140,70:32},o($VO,[2,98]),{19:[1,141]},o($V_,[2,33],{35:$V$}),{36:[1,143],37:[1,144]},{20:[1,145]},{8:147,12:71,19:$V1,26:$V01,30:$V5,45:$V7,52:146,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{57:[1,149]},o($V11,[2,100],{20:$VK,28:$VK,72:$VK,76:$VK,77:$VK,78:$VK,79:$VK,80:$VK,81:$VK,82:$VK,83:$VK,84:$VK,85:$VK,86:$VK,87:$VK,88:$VK,89:$VK,90:$VK,27:[1,151],30:[1,152],73:[1,150]}),{19:[1,153],71:[1,154],72:[1,155],75:[1,156]},{19:[1,157],72:[1,158]},o($VO,[2,104]),o([5,19,21,23,24,25,26,30,32,33,35,38,39,41,44,45,54,55,64,66,67,71,91,92,93,94,95,96,97],[2,109],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o($VO,[2,117],{75:[1,159]}),o($V21,[2,123],{72:$Vq,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V21,[2,124],{72:$Vq,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($VU,[2,125],{83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($VU,[2,126],{83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($VU,[2,127],{83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V31,[2,129],{56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V31,[2,130],{56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V31,[2,131],{56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V31,[2,132],{56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V31,[2,133],{56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V31,[2,134],{56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V31,[2,135],{56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($V41,[2,136],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o($V41,[2,137],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o($V41,[2,138],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o($V41,[2,139],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o($V41,[2,140],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o($V41,[2,141],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o([5,19,21,23,24,25,26,30,31,32,33,35,38,39,41,44,45,54,55,64,66,67,71,74,89,91,92,93,94,95,96,97],[2,142],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:$VF}),o($VW,[2,143],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD}),o($Vl,[2,12]),{13:160,16:161,39:$VH,41:$VI},o($Vl,[2,13]),{13:162,41:$VI},o($Vl,[2,14]),o([5,21,24,25,33,64,66,67],[2,49],{53:29,12:71,8:125,43:163,18:$VP,19:$V1,23:$VQ,26:$VR,30:$VS,44:$VT,45:$V7,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk}),o($V51,[2,51]),o([5,18,19,20,23,24,25,26,28,30,33,44,45,54,55,56,64,66,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],[2,52],{69:27,70:32,11:164,21:$V2,67:$Vc}),{8:165,12:166,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{26:[1,167],44:[1,168]},{30:[1,169]},{18:$Vm,20:$Vn,23:[1,170],28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{19:$V61},o($V71,[2,46],{69:27,70:32,11:172,21:$V2,67:$Vc}),{26:[1,173]},o($Vl,[2,15]),{13:174,16:175,39:$VH,41:$VI},o($Vl,[2,16]),{13:176,41:$VI},o($Vl,[2,17]),o($VJ,[2,145]),o($VJ,[2,146]),o($VJ,[2,147]),{30:[1,177]},{18:$Vm,20:$Vn,28:$Vo,32:[1,178],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{28:[1,179]},o($VL,[2,96],{70:81,21:$V2}),{27:[1,180]},{26:$VM,34:181},{11:182,21:$V2,26:[1,183],30:[1,184],67:$Vc,69:27,70:32},{26:[1,185]},{7:186,17:11,18:$V0,19:[1,189],22:187,23:[1,188]},{32:[1,190],35:$V81},o($V91,[2,78],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),o([18,20,28,32,35,56,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],[2,79],{69:27,70:32,11:192,21:$V2,67:$Vc}),{30:[1,193]},{8:194,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{19:$VZ,27:[1,195]},{32:[1,196]},o($V11,[2,101],{27:[1,198],30:[1,199],73:[1,197]}),{19:[1,200],72:[1,201]},o($VO,[2,105]),o($VO,[2,118],{75:[1,202]}),o($VO,[2,102],{20:$VY,28:$VY,72:$VY,76:$VY,77:$VY,78:$VY,79:$VY,80:$VY,81:$VY,82:$VY,83:$VY,84:$VY,85:$VY,86:$VY,87:$VY,88:$VY,89:$VY,90:$VY}),o($VO,[2,106]),o($VO,[2,119]),o($Vl,[2,18]),{13:203,41:$VI},o($Vl,[2,19]),o($V51,[2,50]),o($V51,[2,53]),{18:$Vm,20:$Vn,28:$Vo,32:[1,204],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},o([18,20,28,56,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VV,{32:[1,205]}),{11:207,21:$V2,24:[1,206],67:$Vc,69:27,70:32},{30:[1,208]},{26:[1,209]},{26:[1,210],44:[1,211]},{20:[1,212]},o($V71,[2,45]),{11:213,21:$V2,41:[2,48],67:$Vc,69:27,70:32},o($Vl,[2,20]),{13:214,41:$VI},o($Vl,[2,21]),{8:147,12:71,19:$V1,26:$V01,30:$V5,45:$V7,52:215,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{65:[1,216]},{8:219,12:71,19:$V1,26:$V4,29:217,30:[1,218],45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{19:[1,220]},o($V_,[2,34],{35:$V$}),o($Va1,[2,35]),o($Va1,[2,36],{69:27,70:32,11:221,21:$V2,67:$Vc}),{8:222,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{36:[1,223]},{17:38,18:[1,224]},{18:[1,225],19:[1,226]},{4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Vb1,[2,92]),o($VJ,[2,75]),{8:147,12:71,19:$V1,26:$V01,30:$V5,45:$V7,52:228,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($V91,[2,80]),{8:147,12:71,19:$V1,26:$V01,30:$V5,45:$V7,52:229,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,74:[1,230],76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{19:[1,231],72:[1,232]},o($VO,[2,121]),{8:233,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{27:[1,234]},{32:[1,235]},o($VO,[2,103]),o($VO,[2,107]),o($VO,[2,120]),o($Vl,[2,22]),o([5,18,19,20,21,23,24,25,26,28,30,33,44,45,54,55,56,64,66,67,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],[2,54]),o($V51,[2,55]),o($V51,[2,56]),{24:[1,236]},{26:[1,237]},{11:239,21:$V2,32:[1,238],67:$Vc,69:27,70:32},{11:241,21:$V2,24:[1,240],67:$Vc,69:27,70:32},{30:[1,242]},{8:125,12:71,18:$VP,19:$V1,23:$VQ,26:$VR,30:$VS,42:243,43:120,44:$VT,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{41:[2,47]},o($Vl,[2,23]),{32:[1,244],35:$V81},{4:245,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Vc1,[2,29]),{8:246,12:247,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o([5,19,21,24,25,26,30,33,38,39,41,45,54,55,64,66,67,71,91,92,93,94,95,96,97],[2,31],{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF}),{30:[1,248]},o($Va1,[2,37]),{18:$Vm,20:$Vn,28:$Vo,31:[1,250],35:[1,249],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{11:251,21:$V2,26:[1,252],30:[1,253],67:$Vc,69:27,70:32},{19:$VN,21:[1,254]},{21:[1,255]},o($Vb1,[2,91]),{6:37,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,24:[1,256],25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{32:[2,77],35:$V81},{32:[1,257],35:$V81},o($VO,[2,108]),o($VO,[2,111],{73:[1,258]}),o($VO,[2,112]),{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,74:[1,259],76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{19:[1,260],72:[1,261]},o($VO,[2,122]),o($V51,[2,59]),{11:263,21:$V2,32:[1,262],67:$Vc,69:27,70:32},o($V51,[2,57]),{32:[1,264]},o($V51,[2,58]),{24:[1,265]},{26:[1,266]},{8:125,12:71,18:[1,267],19:$V1,23:$VQ,26:$VR,30:$VS,43:163,44:$VT,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($VJ,[2,71]),o([5,24],[2,93],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,69:27,53:29,70:32,6:37,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,54:$V8,55:$V9,56:$Va,64:$Vb,66:[1,268],67:$Vc,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk}),{18:$Vm,20:$Vn,28:$Vo,31:[1,269],32:$VX,56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},o([18,20,28,31,56,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VV,{32:[1,270]}),{26:$Vd1,32:[1,272],47:271},{8:274,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:275,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Va1,[2,38]),o($Va1,[2,39],{69:27,70:32,11:276,21:$V2,67:$Vc}),{8:277,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{19:[1,278]},{19:[1,279]},{18:[1,280]},o($VJ,[2,76]),{8:281,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($VO,[2,110]),o($VO,[2,113],{73:[1,282]}),o($VO,[2,114]),{24:[1,283]},{32:[1,284]},o($V51,[2,60]),o($V51,[2,61]),{11:286,21:$V2,32:[1,285],67:$Vc,69:27,70:32},{19:$V61,21:[1,287]},{4:288,6:3,7:4,8:5,9:289,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:290,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Vc1,[2,32]),{32:[1,291],35:$Ve1},{23:[1,294],48:[1,293]},{48:[1,295]},{18:$Vm,20:$Vn,28:$Vo,32:[1,296],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{18:$Vm,20:$Vn,28:$Vo,32:[1,297],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},o($Va1,[2,40]),{18:$Vm,20:$Vn,28:$Vo,31:[1,299],35:[1,298],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{20:[1,300]},{20:[1,301]},{21:[1,302]},{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,74:[1,303],76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{8:304,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($V51,[2,62]),{24:[1,305]},{24:[1,306]},{32:[1,307]},{19:[1,308]},o([5,24,66],[2,94],{7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,69:27,53:29,70:32,6:37,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk}),o($Vl,[2,95]),{18:$Vm,20:$Vn,28:$Vo,32:[1,309],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{23:[1,311],48:[1,310]},{26:$Vd1,47:312},{49:[1,313]},{4:314,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{49:[1,315]},o($Va1,[2,41]),o($Va1,[2,42]),{8:316,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{8:317,12:71,19:$V1,26:$V4,30:$V5,45:$V7,53:29,54:$V8,55:$V9,56:$Va,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Vl,[2,26]),o($Vl,[2,27]),{19:[1,318]},o($VO,[2,115]),{18:$Vm,20:$Vn,28:$Vo,56:$Vp,72:$Vq,74:[1,319],76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},o($V51,[2,64]),o($V51,[2,63]),{24:[1,320]},{20:[1,321]},o($Vc1,[2,30]),{49:[1,322]},{4:323,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{32:[2,73],35:$Ve1},{27:[1,324]},{6:37,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,24:[1,325],25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{27:[1,326]},{18:$Vm,20:$Vn,28:$Vo,32:[1,327],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{18:$Vm,20:$Vn,28:$Vo,32:[1,328],56:$Vp,72:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF},{20:[1,329]},o($VO,[2,116]),o($V51,[2,65]),o($V51,[2,66]),{27:[1,330]},{6:37,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,24:[1,331],25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{50:332,58:$Vf1,60:$Vg1,61:$Vh1,62:$Vi1,63:$Vj1},{51:[1,338]},{50:339,58:$Vf1,60:$Vg1,61:$Vh1,62:$Vi1,63:$Vj1},o($Va1,[2,43]),o($Va1,[2,44]),o($Vl,[2,28]),{50:340,58:$Vf1,60:$Vg1,61:$Vh1,62:$Vi1,63:$Vj1},{51:[1,341]},{23:[1,342]},o($Vk1,[2,86],{59:[1,343]}),o($Vk1,[2,87],{59:[1,344]}),o($Vk1,[2,88],{59:[1,345]}),o($Vk1,[2,89],{59:[1,346]}),o($Vk1,[2,90],{59:[1,347]}),o($VJ,[2,70]),o($V91,[2,74]),{23:[1,348]},o($VJ,[2,68]),{4:349,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},o($Vk1,[2,81]),o($Vk1,[2,82]),o($Vk1,[2,83]),o($Vk1,[2,84]),o($Vk1,[2,85]),{4:350,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{6:37,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,24:[1,351],25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{6:37,7:4,8:5,9:6,10:7,11:8,12:9,14:10,17:11,18:$V0,19:$V1,21:$V2,24:[1,352],25:$V3,26:$V4,30:$V5,33:$V6,45:$V7,53:29,54:$V8,55:$V9,56:$Va,64:$Vb,67:$Vc,69:27,70:32,71:$Vd,91:$Ve,92:$Vf,93:$Vg,94:$Vh,95:$Vi,96:$Vj,97:$Vk},{51:[1,353]},{51:[1,354]},o($VJ,[2,69]),o($VJ,[2,67])],
defaultActions: {36:[2,1],213:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip comments*/
break;
case 1: return 68 
break;
case 2: return 30 
break;
case 3: return 32 
break;
case 4: return 73 
break;
case 5: return 74 
break;
case 6: return 23 
break;
case 7: return 24 
break;
case 8: return 75 
break;
case 9: return 27 
break;
case 10: return 35 
break;
case 11: return 51 
break;
case 12: return 92 
break;
case 13: return 93 
break;
case 14: return 33 
break;
case 15: return 25 
break;
case 16: return 38 
break;
case 17: return 39
break;
case 18: return 40 
break;
case 19: return 41 
break;
case 20: return 64 
break;
case 21: return 65 
break;
case 22: return 66 
break;
case 23: return 37 
break;
case 24: return 31 
break;
case 25: return 36 
break;
case 26: return 44 
break;
case 27: return 45 
break;
case 28: return 46 
break;
case 29: return 55 
break;
case 30: return 57 
break;
case 31: return 54 
break;
case 32: return 49 
break;
case 33: return 48 
break;
case 34: return 76 
break;
case 35: return 56 
break;
case 36: return 72 
break;
case 37: return 21 
break;
case 38: return 77 
break;
case 39: return 'POTENCIA' 
break;
case 40: return 78 
break;
case 41: return 59 
break;
case 42: return 79
break;
case 43: return 80
break;
case 44: return 18
break;
case 45: return 20
break;
case 46: return 82
break;
case 47: return 81
break;
case 48: return 28
break;
case 49: return 83
break;
case 50: return 84
break;
case 51: return 86
break;
case 52: return 85
break;
case 53: return 88
break;
case 54: return 87
break;
case 55: return 89
break;
case 56: return 90
break;
case 57: return 91
break;
case 58: return 71 
break;
case 59: return 58 
break;
case 60: return 60 
break;
case 61: return 61 
break;
case 62: return 62 
break;
case 63: return 63 
break;
case 64: return 96
break;
case 65: return 97
break;
case 66: return 'PRINT' 
break;
case 67: return 94
break;
case 68: return 19
break;
case 69: return 95
break;
case 70: return 26 
break;
case 71:/* skip whitespace */
break;
case 72:return 5
break;
case 73: console.log("error lexico",yy_.yylineno); 
break;
}
},
rules: [/^(?:[(][:][^:()]*[:][)])/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:for\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:at\b)/i,/^(?:to\b)/i,/^(?:in\b)/i,/^(?:data\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:upper\b)/i,/^(?:case\b)/i,/^(?:substring\b)/i,/^(?:xs\b)/i,/^(?:as\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:div\b)/i,/^(?:\^)/i,/^(?:mod\b)/i,/^(?:\?)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:!)/i,/^(?:@)/i,/^(?:string\b)/i,/^(?:integer\b)/i,/^(?:decimal\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("([^\"\\])*")))/i,/^(?:([$][a-zñA-ZÑ0-9]+))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xquery;
exports.Parser = xquery.Parser;
exports.parse = function () { return xquery.parse.apply(xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}