/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpath_descendente = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[5,7],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[5,7,9],$V7=[1,36],$V8=[1,33],$V9=[1,30],$Va=[1,28],$Vb=[1,29],$Vc=[1,31],$Vd=[1,32],$Ve=[1,34],$Vf=[1,35],$Vg=[1,37],$Vh=[1,38],$Vi=[1,44],$Vj=[1,42],$Vk=[1,43],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[16,21,25,27,28,29,30,31,32,33,34,35,36,37,38,39],$Vx=[21,25,38,39],$Vy=[21,25,27,28,31,32,33,34,35,36,37,38,39],$Vz=[21,25,31,32,33,34,35,36,37,38,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_several":4,"EOF":5,"lista_select":6,"SEVERAL":7,"select":8,"DIV":9,"list_op_select":10,"opcion_select":11,"ID":12,"otra_opcion_s":13,"ATR":14,"fin_opcion_s":15,"MULTI":16,"PTN":17,"opcion_padre_s":18,"CORA":19,"e":20,"CORC":21,"DPTN":22,"axes_select":23,"PARA":24,"PARC":25,"axes_predi_slc":26,"MAS":27,"MENOS":28,"DIVS":29,"MODULO":30,"MENORQUE":31,"MAYORQUE":32,"MENORIGUAL":33,"MAYORIGUAL":34,"IGUAL":35,"IGUALIGUAL":36,"DIFERENTE":37,"OR":38,"AND":39,"NOT":40,"LAST":41,"POSITION":42,"NUM":43,"CADENA":44,"TRUE":45,"FALSE":46,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEVERAL",9:"DIV",12:"ID",14:"ATR",16:"MULTI",17:"PTN",19:"CORA",21:"CORC",22:"DPTN",24:"PARA",25:"PARC",27:"MAS",28:"MENOS",29:"DIVS",30:"MODULO",31:"MENORQUE",32:"MAYORQUE",33:"MENORIGUAL",34:"MAYORIGUAL",35:"IGUAL",36:"IGUALIGUAL",37:"DIFERENTE",38:"OR",39:"AND",40:"NOT",41:"LAST",42:"POSITION",43:"NUM",44:"CADENA",45:"TRUE",46:"FALSE"},
productions_: [0,[3,2],[4,3],[4,1],[6,2],[6,1],[8,2],[10,2],[10,1],[11,2],[11,2],[11,1],[11,2],[18,1],[18,0],[13,3],[13,3],[13,2],[13,0],[23,2],[23,1],[26,3],[26,0],[15,1],[15,1],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                    reportG.push(new gramatic.default("inicio : lista_several EOF","{ inicio.val = new ast_xpath.default(lista_several.val); }"));
                    let auxReportG = reportG;
                    reportG = [];
                    this.$ = { "xpath": new ast_xpath.default($$[$0-1]), "reportG": auxReportG};
                    return this.$     
                
break;
case 2:

                    this.$ = $$[$0];
                    this.$.push($$[$0-2]);
                    reportG.push(new gramatic.default("lista_several : lista_select SEVERAL lista_several","{ lista_several.val = lista_severalP.val;\n lista_several.val.push(lista_select.val); }"));
                
break;
case 3:

                    this.$ = new Array();
                    this.$.push($$[$0]);
                    reportG.push(new gramatic.default("lista_several : lista_select","{ lista_several.val = new Array();\n lista_several.val.push(lista_select.val); }"));
                
break;
case 4:

                    this.$ = $$[$0];
                    this.$.push($$[$0-1]);
                    reportG.push(new gramatic.default("lista_select : select lista_select","{ lista_select.val = lista_selectP.val;\n lista_select.val.push(select.val); }"));
                
break;
case 5:

                    this.$ = new Array();
                    this.$.push($$[$0]);
                    reportG.push(new gramatic.default("lista_select : select","{ lista_select.val = new Array();\n lista_select.val.push(select.val); }"));
                
break;
case 6:

                    this.$ = $$[$0]
                    reportG.push(new gramatic.default("select : DIV list_op_select","{ select.val = list_op_select.val }"));
                
break;
case 7:

                    if ($$[$0].slc){
                        $$[$0].slc.tipe = "//";
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("list_op_select : DIV opcion_select","{ opcion_select.slc.val.tipe = '//';\n list_op_select.val = opcion_select.val }"));
                    }else{
                        $$[$0].tipe = "//";
                        if ($$[$0].hasOwnProperty("axe")){
                            if ($$[$0].axe === "^"){
                                $$[$0].axe = ".."
                            }
                        }
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("list_op_select : DIV opcion_select","{ opcion_select.val.tipe = '//';\n list_op_select.val = opcion_select.val }"));
                    }
                
break;
case 8:

                    if ($$[$0].slc){
                        $$[$0].slc.tipe = "/";
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("list_op_select : opcion_select","{ opcion_select.slc.val.tipe = '/';\n list_op_select.val = opcion_select.val }"));
                    }else{
                        $$[$0].tipe = "/";
                        if ($$[$0].hasOwnProperty("axe")){
                            if ($$[$0].axe === "^"){
                                $$[$0].axe = "parent"
                            }
                        }
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("list_op_select : opcion_select","{ opcion_select.val.tipe = '/';\n list_op_select.val = opcion_select.val }"));
                    }
                
break;
case 9:

                    if ($$[$0].hasOwnProperty("axe")){
                        if ($$[$0].axe === "@"){
                            $$[$0].axe = $$[$0-1] + "()";
                        }else if ($$[$0].axe !== "^" && $$[$0].axe !== "self"){
                            $$[$0].axe = $$[$0-1];
                        }
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("opcion_select : ID otra_opcion_s","{ otra_opcion_s.val.axe = ID.valLex;\n opcion_select.val = otra_opcion_s.val }"));
                    }else if ($$[$0].slc){
                        if ($$[$0].slc.hasOwnProperty("axe")){
                            $$[$0].slc.axe = $$[$0-1];
                            this.$ = $$[$0];
                            reportG.push(new gramatic.default("opcion_select : ID otra_opcion_s","{ otra_opcion_s.val.slc.axe = ID.valLex;\n opcion_select.val = otra_opcion_s.val }"));
                        }else{
                            $$[$0].slc.id = $$[$0-1];
                            this.$ = $$[$0];
                            reportG.push(new gramatic.default("opcion_select : ID otra_opcion_s","{ otra_opcion_s.val.slc.id = ID.valLex;\n opcion_select.val = otra_opcion_s.val }"));
                        }
                    }else{
                        $$[$0].id = $$[$0-1];
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("opcion_select : ID otra_opcion_s","{ otra_opcion_s.val.id = ID.valLex;\n opcion_select.val = otra_opcion_s.val }"));
                    }
                
break;
case 10:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_select : ATR fin_opcion_s","{ opcion_select.val = fin_opcion_s.val}"));
                
break;
case 11:

                    this.$ = new select.default("","*",false,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("opcion_select : MULTI","{ opcion_select.val = new select.default('','*',false) }"));
                
break;
case 12:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("opcion_select : PTN opcion_padre_S","{ opcion_select.val = opcion_padre_s.val }"));
                
break;
case 13:

                    this.$ = new axes.default("","^","*",_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("opcion_padre_s : PTN","{ opcion_padre_s.val = new axes.default('','','*') }")); 
                
break;
case 14:

                    this.$ = new axes.default("","self","*",_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("opcion_padre_s : epsilon","{ opcion_padre_s.val = new axes.default('','self','*') }"));
                
break;
case 15:

                    this.$ = new predicate.default(new select.default("","",false,_$[$0-2].first_line,_$[$0-2].first_column,null),$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("otra_opcion_s : CORA e CORC","{ otra_opcion_s.val = new predicate.default(new select.default('','',false,null),e.val) }"));
                
break;
case 16:

                    this.$ = $$[$0];
                    reportG.push(new gramatic.default("otra_opcion_s : DPTN DPTN axes_select","{ otra_opcion_s.val = axes_select.val }"));
                
break;
case 17:

                    this.$ = new axes.default("","@","*",_$[$0-1].first_line,_$[$0-1].first_column);
                    reportG.push(new gramatic.default("otra_opcion_s : PARA PARC","{ otra_opcion_s.val = new axes.default('','','*') }"));
                
break;
case 18:

                    this.$ = new select.default("","",false,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("otra_opcion_s : epsilon","{ otra_opcion_s.val = new select.default('','',false) }"));
                
break;
case 19:

                    if ($$[$0].hasOwnProperty("axe")){
                        $$[$0].id = $$[$0-1];
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("axes_select : ID axes_predi_slc","{ axes_predi_slc.val.axe = ID.valLex;\n axes_select.val = axes_predi_slc.val }"));
                    }else{
                        $$[$0].slc.id = $$[$0-1];
                        this.$ = $$[$0];
                        reportG.push(new gramatic.default("axes_select : ID axes_predi_slc","{ axes_select.val = axes_predi_slc.val }"));
                    }
                
break;
case 20:

                    this.$ = new axes.default("","","*",_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("axes_select : MULTI","{ axes_select.val = new axes.default('','','*') }"));
                
break;
case 21:

                    this.$ = new predicate.default(new axes.default("","","",_$[$0-2].first_line,_$[$0-2].first_column),$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("otra_opcion_s : CORA e CORC","{ otra_opcion_s.val = new predicate.default(new axes.default('','','*'),e.val) }"));
                
break;
case 22:

                    this.$ = new axes.default("","","",_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("axes_predi_slc : epsilon","{ axes_predi_slc.val = new axes.default('','','') }"));
                
break;
case 23:

                    this.$ = new select.default("",$$[$0],true,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("fin_opcion_s : ID","{ fin_opcion_s.val = new select.default('',ID.valLex,true) }"));
                
break;
case 24:

                    this.$ = new select.default("",null,true,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("fin_opcion_s : MULTI","{ fin_opcion_s.val = new select.default('',null,true) }"));
                
break;
case 25:

                    this.$ = new aritmetica.default($$[$0-2],"+",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MAS e","{ e.val = new aritmetica.default(e.val,'+',e.val,false) }"));
                
break;
case 26:

                    this.$ = new aritmetica.default($$[$0-2],"-",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENOS e","{ e.val = new aritmetica.default(e.val,'-',e.val,false) }"));
                
break;
case 27:

                    this.$ = new aritmetica.default($$[$0-2],"*",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MULTI e","{ e.val = new aritmetica.default(e.val,'*',e.val,false) }"));
                
break;
case 28:

                    this.$ = new aritmetica.default($$[$0-2],"/",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e DIV e","{ e.val = new aritmetica.default(e.val,'/',e.val,false) }"));
                
break;
case 29:

                    this.$ = new aritmetica.default($$[$0-2],"%",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MODULO e","{ e.val = new aritmetica.default(e.val,'%',e.val,false) }"));
                
break;
case 30:

                    this.$ = new aritmetica.default($$[$0],"UNARIO",null,_$[$0-1].first_line,_$[$0-1].first_column,true);
                    reportG.push(new gramatic.default("e : MENOS e","{ e.val = new aritmetica.default(e.val,'-',null,true) }"));
                
break;
case 31:

                    this.$ = new relacional.default($$[$0-2],"<",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENORQUE e","{ e.val = new relacional.default(e.val,'<',e.val,false) }"));
                
break;
case 32:

                    this.$ = new relacional.default($$[$0-2],">",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MAYORQUE e","{ e.val = new relacional.default(e.val,'>',e.val,false) }"));
                
break;
case 33:

                    this.$ = new relacional.default($$[$0-2],"<=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e MENORIGUAL e","{ e.val = new relacional.default(e.val,'<=',e.val,false) }"));
                
break;
case 34:

                    this.$ = new relacional.default($$[$0-2],">=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    eportG.push(new gramatic.default("e : e MAYORIGUAL e","{ e.val = new relacional.default(e.val,'>=',e.val,false) }"));
                
break;
case 35:

                    this.$ = new relacional.default($$[$0-2],"=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e IGUAL e","{ e.val = new relacional.default(e.val,'=',e.val,false) }"));
                
break;
case 36:

                    this.$ = new relacional.default($$[$0-2],"=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e IGUALIGUAL e","{ e.val = new relacional.default(e.val,'=',e.val,false) }"));
                
break;
case 37:

                    this.$ = new relacional.default($$[$0-2],"!=",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e DIFERENTE e","{ e.val = new relacional.default(e.val,'!=',e.val,false) }"));
                
break;
case 38:

                    this.$ = new logica.default($$[$0-2],"||",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e OR e","{ e.val = new logica.default(e.val,'&&',e.val,false) }"));
                
break;
case 39:

                    this.$ = new logica.default($$[$0-2],"&&",$$[$0],_$[$0-2].first_line,_$[$0-2].first_column,false);
                    reportG.push(new gramatic.default("e : e AND e","{ e.val = new logica.default(e.val,'&&',e.val,false) }"));
                
break;
case 40:
 
                    this.$ = new logica.default($$[$0],"!",null,_$[$0-1].first_line,_$[$0-1].first_column,true);
                    reportG.push(new gramatic.default("e : NOT e","{ e.val = new logica.default(e.val,'!',null,true) }"));
                
break;
case 41:

                    this.$ = $$[$0-1];
                    reportG.push(new gramatic.default("e : PARA e PARC","{ e.val = NUM.valLex }"));
                
break;
case 42:

                    this.$ = new last.default(_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("e : LAST PARA PARC","{ e.val = new last.default() }"));
                
break;
case 43:

                    this.$ = new position.default(_$[$0-2].first_line,_$[$0-2].first_column);
                    reportG.push(new gramatic.default("e : POSITION PARA PARC","{ e.val = new position.default() }"));
                
break;
case 44:

                    this.$ = new filtro.default($$[$0],_$[$0-1].first_line,_$[$0-1].first_column,true);
                    reportG.push(new gramatic.default("e : ATR ID","{ e.val = new filtro.default(ID.valLex,true) }"));
                
break;
case 45:

                    this.$ = new primitivo.default(Number($$[$0]),_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : NUM","{ e.val = new primitivo.default(Number(NUM.valLex)) }"));
                
break;
case 46:

                    $$[$0] = $$[$0].slice(1, $$[$0].length-1);
                    this.$ = new primitivo.default($$[$0],_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : CADENA","{ e.val = new primitivo.default(CADENA.valLex) }"));
                
break;
case 47:

                    this.$ = new filtro.default($$[$0],_$[$0].first_line,_$[$0].first_column,false);
                    reportG.push(new gramatic.default("e : ID","{ e.val = new filtro.default(ID.valLex,false) }"));
                
break;
case 48:

                    this.$ = new primitivo.default(true,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : TRUE","{ e.val = new primitivo.default(true) }"));
                
break;
case 49:

                    this.$ = new primitivo.default(false,_$[$0].first_line,_$[$0].first_column);
                    reportG.push(new gramatic.default("e : FALSE","{ e.val = new primitivo.default(false) }"));
                
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:$V0},{1:[3]},{5:[1,6]},{5:[2,3],7:[1,7]},o($V1,[2,5],{8:4,6:8,9:$V0}),{9:[1,10],10:9,11:11,12:$V2,14:$V3,16:$V4,17:$V5},{1:[2,1]},{4:16,6:3,8:4,9:$V0},o($V1,[2,4]),o($V6,[2,6]),{11:17,12:$V2,14:$V3,16:$V4,17:$V5},o($V6,[2,8]),o($V6,[2,18],{13:18,19:[1,19],22:[1,20],24:[1,21]}),{12:[1,23],15:22,16:[1,24]},o($V6,[2,11]),o($V6,[2,14],{18:25,17:[1,26]}),{5:[2,2]},o($V6,[2,7]),o($V6,[2,9]),{12:$V7,14:$V8,20:27,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{22:[1,39]},{25:[1,40]},o($V6,[2,10]),o($V6,[2,23]),o($V6,[2,24]),o($V6,[2,12]),o($V6,[2,13]),{16:$Vi,21:[1,41],27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:$Vs,37:$Vt,38:$Vu,39:$Vv},{12:$V7,14:$V8,20:56,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:57,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:58,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{24:[1,59]},{24:[1,60]},{12:[1,61]},o($Vw,[2,45]),o($Vw,[2,46]),o($Vw,[2,47]),o($Vw,[2,48]),o($Vw,[2,49]),{12:[1,63],16:[1,64],23:62},o($V6,[2,17]),o($V6,[2,15]),{12:$V7,14:$V8,20:65,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:66,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:67,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:68,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:69,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:70,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:71,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:72,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:73,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:74,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:75,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:76,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:77,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{12:$V7,14:$V8,20:78,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},o($Vw,[2,30]),o($Vx,[2,40],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:$Vs,37:$Vt}),{16:$Vi,25:[1,79],27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:$Vs,37:$Vt,38:$Vu,39:$Vv},{25:[1,80]},{25:[1,81]},o($Vw,[2,44]),o($V6,[2,16]),o($V6,[2,22],{26:82,19:[1,83]}),o($V6,[2,20]),o($Vy,[2,25],{16:$Vi,29:$Vl,30:$Vm}),o($Vy,[2,26],{16:$Vi,29:$Vl,30:$Vm}),o($Vw,[2,27]),o($Vw,[2,28]),o($Vw,[2,29]),o($Vz,[2,31],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm}),o($Vz,[2,32],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm}),o($Vz,[2,33],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm}),o($Vz,[2,34],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm}),o($Vz,[2,35],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm}),o($Vz,[2,36],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm}),o($Vz,[2,37],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm}),o([21,25,38],[2,38],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:$Vs,37:$Vt,39:$Vv}),o($Vx,[2,39],{16:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:$Vs,37:$Vt}),o($Vw,[2,41]),o($Vw,[2,42]),o($Vw,[2,43]),o($V6,[2,19]),{12:$V7,14:$V8,20:84,24:$V9,28:$Va,40:$Vb,41:$Vc,42:$Vd,43:$Ve,44:$Vf,45:$Vg,46:$Vh},{16:$Vi,21:[1,85],27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:$Vs,37:$Vt,38:$Vu,39:$Vv},o($V6,[2,21])],
defaultActions: {6:[2,1],16:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const rep_error = require('../reports/ReportController');

    const primitivo = require('../clases/expresiones/primitivo')
    const print = require('../clases/instrucciones/print')
    const ast_xpath = require('../clases/ast/ast_xpath')

    const aritmetica = require('../clases/expresiones/operaciones/aritmetica')
    const relacional = require('../clases/expresiones/operaciones/relacional')
    const logica = require('../clases/expresiones/operaciones/logica')

    const select = require('../clases/expresiones/select')
    const predicate = require('../clases/expresiones/predicates/predicate')
    const last = require('../clases/expresiones/predicates/last')
    const position = require('../clases/expresiones/predicates/position')
    const filtro = require('../clases/expresiones/predicates/filtro')

    const axes = require('../clases/expresiones/axes/axes')

    /* Reporte Gramatical */
    const gramatic = require('../reports/gramatical');
    let reportG = new Array();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignorar comentarios con multiples lneas*/
break;
case 1: return 7 
break;
case 2: return 24 
break;
case 3: return 25 
break;
case 4: return 19 
break;
case 5: return 21 
break;
case 6: return 17  
break;
case 7: return 22 
break;
case 8: return 41 
break;
case 9: return 42 
break;
case 10: return 27
break;
case 11: return 28
break;
case 12: return 16
break;
case 13: return 9
break;
case 14: return 29
break;
case 15: return 'POTENCIA'
break;
case 16: return 30
break;
case 17: return 33
break;
case 18: return 34
break;
case 19: return 31
break;
case 20: return 32
break;
case 21: return 37
break;
case 22: return 36
break;
case 23: return 35
break;
case 24: return 38
break;
case 25: return 39
break;
case 26: return 40
break;
case 27: return 14 
break;
case 28: return 45
break;
case 29: return 46
break;
case 30: return 'PRINT' 
break;
case 31: return 43
break;
case 32: return 12
break;
case 33: return 44
break;
case 34:/* skip whitespace */
break;
case 35:return 5
break;
case 36: rep_error.InsertarError("lexico", yy_.yytext, "xpath", yy_.yylloc.first_line, yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?::)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:div\b)/i,/^(?:\^)/i,/^(?:mod\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:!)/i,/^(?:@)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("([^\"\\])*")))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpath_descendente;
exports.Parser = xpath_descendente.Parser;
exports.parse = function () { return xpath_descendente.parse.apply(xpath_descendente, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}